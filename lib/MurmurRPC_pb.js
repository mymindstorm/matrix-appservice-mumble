// source: MurmurRPC.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.MurmurRPC.ACL', null, global);
goog.exportSymbol('proto.MurmurRPC.ACL.Group', null, global);
goog.exportSymbol('proto.MurmurRPC.ACL.List', null, global);
goog.exportSymbol('proto.MurmurRPC.ACL.Permission', null, global);
goog.exportSymbol('proto.MurmurRPC.ACL.Query', null, global);
goog.exportSymbol('proto.MurmurRPC.ACL.TemporaryGroup', null, global);
goog.exportSymbol('proto.MurmurRPC.Authenticator', null, global);
goog.exportSymbol('proto.MurmurRPC.Authenticator.Request', null, global);
goog.exportSymbol('proto.MurmurRPC.Authenticator.Request.Authenticate', null, global);
goog.exportSymbol('proto.MurmurRPC.Authenticator.Request.Deregister', null, global);
goog.exportSymbol('proto.MurmurRPC.Authenticator.Request.Find', null, global);
goog.exportSymbol('proto.MurmurRPC.Authenticator.Request.Query', null, global);
goog.exportSymbol('proto.MurmurRPC.Authenticator.Request.Register', null, global);
goog.exportSymbol('proto.MurmurRPC.Authenticator.Request.Update', null, global);
goog.exportSymbol('proto.MurmurRPC.Authenticator.Response', null, global);
goog.exportSymbol('proto.MurmurRPC.Authenticator.Response.Authenticate', null, global);
goog.exportSymbol('proto.MurmurRPC.Authenticator.Response.Deregister', null, global);
goog.exportSymbol('proto.MurmurRPC.Authenticator.Response.Find', null, global);
goog.exportSymbol('proto.MurmurRPC.Authenticator.Response.Initialize', null, global);
goog.exportSymbol('proto.MurmurRPC.Authenticator.Response.Query', null, global);
goog.exportSymbol('proto.MurmurRPC.Authenticator.Response.Register', null, global);
goog.exportSymbol('proto.MurmurRPC.Authenticator.Response.Status', null, global);
goog.exportSymbol('proto.MurmurRPC.Authenticator.Response.Update', null, global);
goog.exportSymbol('proto.MurmurRPC.Ban', null, global);
goog.exportSymbol('proto.MurmurRPC.Ban.List', null, global);
goog.exportSymbol('proto.MurmurRPC.Ban.Query', null, global);
goog.exportSymbol('proto.MurmurRPC.Channel', null, global);
goog.exportSymbol('proto.MurmurRPC.Channel.List', null, global);
goog.exportSymbol('proto.MurmurRPC.Channel.Query', null, global);
goog.exportSymbol('proto.MurmurRPC.Config', null, global);
goog.exportSymbol('proto.MurmurRPC.Config.Field', null, global);
goog.exportSymbol('proto.MurmurRPC.ContextAction', null, global);
goog.exportSymbol('proto.MurmurRPC.ContextAction.Context', null, global);
goog.exportSymbol('proto.MurmurRPC.DatabaseUser', null, global);
goog.exportSymbol('proto.MurmurRPC.DatabaseUser.List', null, global);
goog.exportSymbol('proto.MurmurRPC.DatabaseUser.Query', null, global);
goog.exportSymbol('proto.MurmurRPC.DatabaseUser.Verify', null, global);
goog.exportSymbol('proto.MurmurRPC.Event', null, global);
goog.exportSymbol('proto.MurmurRPC.Event.Type', null, global);
goog.exportSymbol('proto.MurmurRPC.Log', null, global);
goog.exportSymbol('proto.MurmurRPC.Log.List', null, global);
goog.exportSymbol('proto.MurmurRPC.Log.Query', null, global);
goog.exportSymbol('proto.MurmurRPC.RedirectWhisperGroup', null, global);
goog.exportSymbol('proto.MurmurRPC.Server', null, global);
goog.exportSymbol('proto.MurmurRPC.Server.Event', null, global);
goog.exportSymbol('proto.MurmurRPC.Server.Event.Type', null, global);
goog.exportSymbol('proto.MurmurRPC.Server.List', null, global);
goog.exportSymbol('proto.MurmurRPC.Server.Query', null, global);
goog.exportSymbol('proto.MurmurRPC.TextMessage', null, global);
goog.exportSymbol('proto.MurmurRPC.TextMessage.Filter', null, global);
goog.exportSymbol('proto.MurmurRPC.TextMessage.Filter.Action', null, global);
goog.exportSymbol('proto.MurmurRPC.Tree', null, global);
goog.exportSymbol('proto.MurmurRPC.Tree.Query', null, global);
goog.exportSymbol('proto.MurmurRPC.Uptime', null, global);
goog.exportSymbol('proto.MurmurRPC.User', null, global);
goog.exportSymbol('proto.MurmurRPC.User.Kick', null, global);
goog.exportSymbol('proto.MurmurRPC.User.List', null, global);
goog.exportSymbol('proto.MurmurRPC.User.Query', null, global);
goog.exportSymbol('proto.MurmurRPC.Version', null, global);
goog.exportSymbol('proto.MurmurRPC.Void', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.Void = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MurmurRPC.Void, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.Void.displayName = 'proto.MurmurRPC.Void';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.Version = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MurmurRPC.Version, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.Version.displayName = 'proto.MurmurRPC.Version';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.Uptime = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MurmurRPC.Uptime, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.Uptime.displayName = 'proto.MurmurRPC.Uptime';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.Server = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MurmurRPC.Server, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.Server.displayName = 'proto.MurmurRPC.Server';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.Server.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MurmurRPC.Server.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.Server.Event.displayName = 'proto.MurmurRPC.Server.Event';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.Server.Query = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MurmurRPC.Server.Query, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.Server.Query.displayName = 'proto.MurmurRPC.Server.Query';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.Server.List = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MurmurRPC.Server.List.repeatedFields_, null);
};
goog.inherits(proto.MurmurRPC.Server.List, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.Server.List.displayName = 'proto.MurmurRPC.Server.List';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MurmurRPC.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.Event.displayName = 'proto.MurmurRPC.Event';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.ContextAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MurmurRPC.ContextAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.ContextAction.displayName = 'proto.MurmurRPC.ContextAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.TextMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MurmurRPC.TextMessage.repeatedFields_, null);
};
goog.inherits(proto.MurmurRPC.TextMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.TextMessage.displayName = 'proto.MurmurRPC.TextMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.TextMessage.Filter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MurmurRPC.TextMessage.Filter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.TextMessage.Filter.displayName = 'proto.MurmurRPC.TextMessage.Filter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.Log = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MurmurRPC.Log, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.Log.displayName = 'proto.MurmurRPC.Log';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.Log.Query = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MurmurRPC.Log.Query, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.Log.Query.displayName = 'proto.MurmurRPC.Log.Query';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.Log.List = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MurmurRPC.Log.List.repeatedFields_, null);
};
goog.inherits(proto.MurmurRPC.Log.List, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.Log.List.displayName = 'proto.MurmurRPC.Log.List';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.Config = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MurmurRPC.Config, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.Config.displayName = 'proto.MurmurRPC.Config';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.Config.Field = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MurmurRPC.Config.Field, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.Config.Field.displayName = 'proto.MurmurRPC.Config.Field';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.Channel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MurmurRPC.Channel.repeatedFields_, null);
};
goog.inherits(proto.MurmurRPC.Channel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.Channel.displayName = 'proto.MurmurRPC.Channel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.Channel.Query = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MurmurRPC.Channel.Query, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.Channel.Query.displayName = 'proto.MurmurRPC.Channel.Query';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.Channel.List = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MurmurRPC.Channel.List.repeatedFields_, null);
};
goog.inherits(proto.MurmurRPC.Channel.List, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.Channel.List.displayName = 'proto.MurmurRPC.Channel.List';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MurmurRPC.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.User.displayName = 'proto.MurmurRPC.User';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.User.Query = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MurmurRPC.User.Query, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.User.Query.displayName = 'proto.MurmurRPC.User.Query';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.User.List = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MurmurRPC.User.List.repeatedFields_, null);
};
goog.inherits(proto.MurmurRPC.User.List, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.User.List.displayName = 'proto.MurmurRPC.User.List';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.User.Kick = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MurmurRPC.User.Kick, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.User.Kick.displayName = 'proto.MurmurRPC.User.Kick';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.Tree = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MurmurRPC.Tree.repeatedFields_, null);
};
goog.inherits(proto.MurmurRPC.Tree, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.Tree.displayName = 'proto.MurmurRPC.Tree';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.Tree.Query = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MurmurRPC.Tree.Query, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.Tree.Query.displayName = 'proto.MurmurRPC.Tree.Query';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.Ban = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MurmurRPC.Ban, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.Ban.displayName = 'proto.MurmurRPC.Ban';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.Ban.Query = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MurmurRPC.Ban.Query, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.Ban.Query.displayName = 'proto.MurmurRPC.Ban.Query';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.Ban.List = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MurmurRPC.Ban.List.repeatedFields_, null);
};
goog.inherits(proto.MurmurRPC.Ban.List, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.Ban.List.displayName = 'proto.MurmurRPC.Ban.List';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.ACL = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MurmurRPC.ACL, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.ACL.displayName = 'proto.MurmurRPC.ACL';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.ACL.Group = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MurmurRPC.ACL.Group.repeatedFields_, null);
};
goog.inherits(proto.MurmurRPC.ACL.Group, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.ACL.Group.displayName = 'proto.MurmurRPC.ACL.Group';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.ACL.Query = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MurmurRPC.ACL.Query, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.ACL.Query.displayName = 'proto.MurmurRPC.ACL.Query';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.ACL.List = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MurmurRPC.ACL.List.repeatedFields_, null);
};
goog.inherits(proto.MurmurRPC.ACL.List, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.ACL.List.displayName = 'proto.MurmurRPC.ACL.List';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.ACL.TemporaryGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MurmurRPC.ACL.TemporaryGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.ACL.TemporaryGroup.displayName = 'proto.MurmurRPC.ACL.TemporaryGroup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.Authenticator = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MurmurRPC.Authenticator, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.Authenticator.displayName = 'proto.MurmurRPC.Authenticator';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.Authenticator.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MurmurRPC.Authenticator.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.Authenticator.Request.displayName = 'proto.MurmurRPC.Authenticator.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.Authenticator.Request.Authenticate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MurmurRPC.Authenticator.Request.Authenticate.repeatedFields_, null);
};
goog.inherits(proto.MurmurRPC.Authenticator.Request.Authenticate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.Authenticator.Request.Authenticate.displayName = 'proto.MurmurRPC.Authenticator.Request.Authenticate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.Authenticator.Request.Find = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MurmurRPC.Authenticator.Request.Find, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.Authenticator.Request.Find.displayName = 'proto.MurmurRPC.Authenticator.Request.Find';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.Authenticator.Request.Query = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MurmurRPC.Authenticator.Request.Query, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.Authenticator.Request.Query.displayName = 'proto.MurmurRPC.Authenticator.Request.Query';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.Authenticator.Request.Register = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MurmurRPC.Authenticator.Request.Register, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.Authenticator.Request.Register.displayName = 'proto.MurmurRPC.Authenticator.Request.Register';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.Authenticator.Request.Deregister = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MurmurRPC.Authenticator.Request.Deregister, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.Authenticator.Request.Deregister.displayName = 'proto.MurmurRPC.Authenticator.Request.Deregister';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.Authenticator.Request.Update = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MurmurRPC.Authenticator.Request.Update, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.Authenticator.Request.Update.displayName = 'proto.MurmurRPC.Authenticator.Request.Update';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.Authenticator.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MurmurRPC.Authenticator.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.Authenticator.Response.displayName = 'proto.MurmurRPC.Authenticator.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.Authenticator.Response.Initialize = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MurmurRPC.Authenticator.Response.Initialize, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.Authenticator.Response.Initialize.displayName = 'proto.MurmurRPC.Authenticator.Response.Initialize';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.Authenticator.Response.Authenticate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MurmurRPC.Authenticator.Response.Authenticate.repeatedFields_, null);
};
goog.inherits(proto.MurmurRPC.Authenticator.Response.Authenticate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.Authenticator.Response.Authenticate.displayName = 'proto.MurmurRPC.Authenticator.Response.Authenticate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.Authenticator.Response.Find = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MurmurRPC.Authenticator.Response.Find, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.Authenticator.Response.Find.displayName = 'proto.MurmurRPC.Authenticator.Response.Find';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.Authenticator.Response.Query = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MurmurRPC.Authenticator.Response.Query.repeatedFields_, null);
};
goog.inherits(proto.MurmurRPC.Authenticator.Response.Query, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.Authenticator.Response.Query.displayName = 'proto.MurmurRPC.Authenticator.Response.Query';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.Authenticator.Response.Register = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MurmurRPC.Authenticator.Response.Register, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.Authenticator.Response.Register.displayName = 'proto.MurmurRPC.Authenticator.Response.Register';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.Authenticator.Response.Deregister = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MurmurRPC.Authenticator.Response.Deregister, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.Authenticator.Response.Deregister.displayName = 'proto.MurmurRPC.Authenticator.Response.Deregister';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.Authenticator.Response.Update = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MurmurRPC.Authenticator.Response.Update, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.Authenticator.Response.Update.displayName = 'proto.MurmurRPC.Authenticator.Response.Update';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.DatabaseUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MurmurRPC.DatabaseUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.DatabaseUser.displayName = 'proto.MurmurRPC.DatabaseUser';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.DatabaseUser.Query = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MurmurRPC.DatabaseUser.Query, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.DatabaseUser.Query.displayName = 'proto.MurmurRPC.DatabaseUser.Query';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.DatabaseUser.List = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MurmurRPC.DatabaseUser.List.repeatedFields_, null);
};
goog.inherits(proto.MurmurRPC.DatabaseUser.List, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.DatabaseUser.List.displayName = 'proto.MurmurRPC.DatabaseUser.List';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.DatabaseUser.Verify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MurmurRPC.DatabaseUser.Verify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.DatabaseUser.Verify.displayName = 'proto.MurmurRPC.DatabaseUser.Verify';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MurmurRPC.RedirectWhisperGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MurmurRPC.RedirectWhisperGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MurmurRPC.RedirectWhisperGroup.displayName = 'proto.MurmurRPC.RedirectWhisperGroup';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.Void.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.Void.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.Void} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Void.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.Void}
 */
proto.MurmurRPC.Void.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.Void;
  return proto.MurmurRPC.Void.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.Void} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.Void}
 */
proto.MurmurRPC.Void.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.Void.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.Void.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.Void} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Void.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.Version.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.Version.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.Version} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Version.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    release: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    os: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    osVersion: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.Version}
 */
proto.MurmurRPC.Version.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.Version;
  return proto.MurmurRPC.Version.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.Version} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.Version}
 */
proto.MurmurRPC.Version.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRelease(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOs(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOsVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.Version.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.Version.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.Version} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Version.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint32 version = 1;
 * @return {number}
 */
proto.MurmurRPC.Version.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.MurmurRPC.Version} returns this
 */
proto.MurmurRPC.Version.prototype.setVersion = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Version} returns this
 */
proto.MurmurRPC.Version.prototype.clearVersion = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Version.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string release = 2;
 * @return {string}
 */
proto.MurmurRPC.Version.prototype.getRelease = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.MurmurRPC.Version} returns this
 */
proto.MurmurRPC.Version.prototype.setRelease = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Version} returns this
 */
proto.MurmurRPC.Version.prototype.clearRelease = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Version.prototype.hasRelease = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string os = 3;
 * @return {string}
 */
proto.MurmurRPC.Version.prototype.getOs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.MurmurRPC.Version} returns this
 */
proto.MurmurRPC.Version.prototype.setOs = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Version} returns this
 */
proto.MurmurRPC.Version.prototype.clearOs = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Version.prototype.hasOs = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string os_version = 4;
 * @return {string}
 */
proto.MurmurRPC.Version.prototype.getOsVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.MurmurRPC.Version} returns this
 */
proto.MurmurRPC.Version.prototype.setOsVersion = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Version} returns this
 */
proto.MurmurRPC.Version.prototype.clearOsVersion = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Version.prototype.hasOsVersion = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.Uptime.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.Uptime.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.Uptime} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Uptime.toObject = function(includeInstance, msg) {
  var f, obj = {
    secs: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.Uptime}
 */
proto.MurmurRPC.Uptime.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.Uptime;
  return proto.MurmurRPC.Uptime.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.Uptime} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.Uptime}
 */
proto.MurmurRPC.Uptime.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSecs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.Uptime.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.Uptime.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.Uptime} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Uptime.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 secs = 1;
 * @return {number}
 */
proto.MurmurRPC.Uptime.prototype.getSecs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.MurmurRPC.Uptime} returns this
 */
proto.MurmurRPC.Uptime.prototype.setSecs = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Uptime} returns this
 */
proto.MurmurRPC.Uptime.prototype.clearSecs = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Uptime.prototype.hasSecs = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.Server.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.Server.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.Server} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Server.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    running: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f,
    uptime: (f = msg.getUptime()) && proto.MurmurRPC.Uptime.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.Server}
 */
proto.MurmurRPC.Server.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.Server;
  return proto.MurmurRPC.Server.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.Server} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.Server}
 */
proto.MurmurRPC.Server.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRunning(value);
      break;
    case 3:
      var value = new proto.MurmurRPC.Uptime;
      reader.readMessage(value,proto.MurmurRPC.Uptime.deserializeBinaryFromReader);
      msg.setUptime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.Server.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.Server.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.Server} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Server.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getUptime();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.MurmurRPC.Uptime.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.Server.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.Server.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.Server.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Server.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    server: (f = msg.getServer()) && proto.MurmurRPC.Server.toObject(includeInstance, f),
    type: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    user: (f = msg.getUser()) && proto.MurmurRPC.User.toObject(includeInstance, f),
    message: (f = msg.getMessage()) && proto.MurmurRPC.TextMessage.toObject(includeInstance, f),
    channel: (f = msg.getChannel()) && proto.MurmurRPC.Channel.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.Server.Event}
 */
proto.MurmurRPC.Server.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.Server.Event;
  return proto.MurmurRPC.Server.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.Server.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.Server.Event}
 */
proto.MurmurRPC.Server.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MurmurRPC.Server;
      reader.readMessage(value,proto.MurmurRPC.Server.deserializeBinaryFromReader);
      msg.setServer(value);
      break;
    case 2:
      var value = /** @type {!proto.MurmurRPC.Server.Event.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = new proto.MurmurRPC.User;
      reader.readMessage(value,proto.MurmurRPC.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 4:
      var value = new proto.MurmurRPC.TextMessage;
      reader.readMessage(value,proto.MurmurRPC.TextMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 5:
      var value = new proto.MurmurRPC.Channel;
      reader.readMessage(value,proto.MurmurRPC.Channel.deserializeBinaryFromReader);
      msg.setChannel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.Server.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.Server.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.Server.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Server.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MurmurRPC.Server.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.MurmurRPC.Server.Event.Type} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.MurmurRPC.User.serializeBinaryToWriter
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.MurmurRPC.TextMessage.serializeBinaryToWriter
    );
  }
  f = message.getChannel();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.MurmurRPC.Channel.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.MurmurRPC.Server.Event.Type = {
  USERCONNECTED: 0,
  USERDISCONNECTED: 1,
  USERSTATECHANGED: 2,
  USERTEXTMESSAGE: 3,
  CHANNELCREATED: 4,
  CHANNELREMOVED: 5,
  CHANNELSTATECHANGED: 6
};

/**
 * optional Server server = 1;
 * @return {?proto.MurmurRPC.Server}
 */
proto.MurmurRPC.Server.Event.prototype.getServer = function() {
  return /** @type{?proto.MurmurRPC.Server} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Server, 1));
};


/**
 * @param {?proto.MurmurRPC.Server|undefined} value
 * @return {!proto.MurmurRPC.Server.Event} returns this
*/
proto.MurmurRPC.Server.Event.prototype.setServer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.Server.Event} returns this
 */
proto.MurmurRPC.Server.Event.prototype.clearServer = function() {
  return this.setServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Server.Event.prototype.hasServer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Type type = 2;
 * @return {!proto.MurmurRPC.Server.Event.Type}
 */
proto.MurmurRPC.Server.Event.prototype.getType = function() {
  return /** @type {!proto.MurmurRPC.Server.Event.Type} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.MurmurRPC.Server.Event.Type} value
 * @return {!proto.MurmurRPC.Server.Event} returns this
 */
proto.MurmurRPC.Server.Event.prototype.setType = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Server.Event} returns this
 */
proto.MurmurRPC.Server.Event.prototype.clearType = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Server.Event.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional User user = 3;
 * @return {?proto.MurmurRPC.User}
 */
proto.MurmurRPC.Server.Event.prototype.getUser = function() {
  return /** @type{?proto.MurmurRPC.User} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.User, 3));
};


/**
 * @param {?proto.MurmurRPC.User|undefined} value
 * @return {!proto.MurmurRPC.Server.Event} returns this
*/
proto.MurmurRPC.Server.Event.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.Server.Event} returns this
 */
proto.MurmurRPC.Server.Event.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Server.Event.prototype.hasUser = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TextMessage message = 4;
 * @return {?proto.MurmurRPC.TextMessage}
 */
proto.MurmurRPC.Server.Event.prototype.getMessage = function() {
  return /** @type{?proto.MurmurRPC.TextMessage} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.TextMessage, 4));
};


/**
 * @param {?proto.MurmurRPC.TextMessage|undefined} value
 * @return {!proto.MurmurRPC.Server.Event} returns this
*/
proto.MurmurRPC.Server.Event.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.Server.Event} returns this
 */
proto.MurmurRPC.Server.Event.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Server.Event.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Channel channel = 5;
 * @return {?proto.MurmurRPC.Channel}
 */
proto.MurmurRPC.Server.Event.prototype.getChannel = function() {
  return /** @type{?proto.MurmurRPC.Channel} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Channel, 5));
};


/**
 * @param {?proto.MurmurRPC.Channel|undefined} value
 * @return {!proto.MurmurRPC.Server.Event} returns this
*/
proto.MurmurRPC.Server.Event.prototype.setChannel = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.Server.Event} returns this
 */
proto.MurmurRPC.Server.Event.prototype.clearChannel = function() {
  return this.setChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Server.Event.prototype.hasChannel = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.Server.Query.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.Server.Query.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.Server.Query} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Server.Query.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.Server.Query}
 */
proto.MurmurRPC.Server.Query.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.Server.Query;
  return proto.MurmurRPC.Server.Query.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.Server.Query} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.Server.Query}
 */
proto.MurmurRPC.Server.Query.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.Server.Query.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.Server.Query.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.Server.Query} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Server.Query.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MurmurRPC.Server.List.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.Server.List.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.Server.List.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.Server.List} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Server.List.toObject = function(includeInstance, msg) {
  var f, obj = {
    serversList: jspb.Message.toObjectList(msg.getServersList(),
    proto.MurmurRPC.Server.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.Server.List}
 */
proto.MurmurRPC.Server.List.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.Server.List;
  return proto.MurmurRPC.Server.List.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.Server.List} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.Server.List}
 */
proto.MurmurRPC.Server.List.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MurmurRPC.Server;
      reader.readMessage(value,proto.MurmurRPC.Server.deserializeBinaryFromReader);
      msg.addServers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.Server.List.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.Server.List.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.Server.List} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Server.List.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.MurmurRPC.Server.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Server servers = 1;
 * @return {!Array<!proto.MurmurRPC.Server>}
 */
proto.MurmurRPC.Server.List.prototype.getServersList = function() {
  return /** @type{!Array<!proto.MurmurRPC.Server>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MurmurRPC.Server, 1));
};


/**
 * @param {!Array<!proto.MurmurRPC.Server>} value
 * @return {!proto.MurmurRPC.Server.List} returns this
*/
proto.MurmurRPC.Server.List.prototype.setServersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.MurmurRPC.Server=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MurmurRPC.Server}
 */
proto.MurmurRPC.Server.List.prototype.addServers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.MurmurRPC.Server, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MurmurRPC.Server.List} returns this
 */
proto.MurmurRPC.Server.List.prototype.clearServersList = function() {
  return this.setServersList([]);
};


/**
 * required uint32 id = 1;
 * @return {number}
 */
proto.MurmurRPC.Server.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.MurmurRPC.Server} returns this
 */
proto.MurmurRPC.Server.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Server} returns this
 */
proto.MurmurRPC.Server.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Server.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool running = 2;
 * @return {boolean}
 */
proto.MurmurRPC.Server.prototype.getRunning = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MurmurRPC.Server} returns this
 */
proto.MurmurRPC.Server.prototype.setRunning = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Server} returns this
 */
proto.MurmurRPC.Server.prototype.clearRunning = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Server.prototype.hasRunning = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Uptime uptime = 3;
 * @return {?proto.MurmurRPC.Uptime}
 */
proto.MurmurRPC.Server.prototype.getUptime = function() {
  return /** @type{?proto.MurmurRPC.Uptime} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Uptime, 3));
};


/**
 * @param {?proto.MurmurRPC.Uptime|undefined} value
 * @return {!proto.MurmurRPC.Server} returns this
*/
proto.MurmurRPC.Server.prototype.setUptime = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.Server} returns this
 */
proto.MurmurRPC.Server.prototype.clearUptime = function() {
  return this.setUptime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Server.prototype.hasUptime = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    server: (f = msg.getServer()) && proto.MurmurRPC.Server.toObject(includeInstance, f),
    type: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.Event}
 */
proto.MurmurRPC.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.Event;
  return proto.MurmurRPC.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.Event}
 */
proto.MurmurRPC.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MurmurRPC.Server;
      reader.readMessage(value,proto.MurmurRPC.Server.deserializeBinaryFromReader);
      msg.setServer(value);
      break;
    case 2:
      var value = /** @type {!proto.MurmurRPC.Event.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MurmurRPC.Server.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.MurmurRPC.Event.Type} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.MurmurRPC.Event.Type = {
  SERVERSTOPPED: 0,
  SERVERSTARTED: 1
};

/**
 * optional Server server = 1;
 * @return {?proto.MurmurRPC.Server}
 */
proto.MurmurRPC.Event.prototype.getServer = function() {
  return /** @type{?proto.MurmurRPC.Server} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Server, 1));
};


/**
 * @param {?proto.MurmurRPC.Server|undefined} value
 * @return {!proto.MurmurRPC.Event} returns this
*/
proto.MurmurRPC.Event.prototype.setServer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.Event} returns this
 */
proto.MurmurRPC.Event.prototype.clearServer = function() {
  return this.setServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Event.prototype.hasServer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Type type = 2;
 * @return {!proto.MurmurRPC.Event.Type}
 */
proto.MurmurRPC.Event.prototype.getType = function() {
  return /** @type {!proto.MurmurRPC.Event.Type} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.MurmurRPC.Event.Type} value
 * @return {!proto.MurmurRPC.Event} returns this
 */
proto.MurmurRPC.Event.prototype.setType = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Event} returns this
 */
proto.MurmurRPC.Event.prototype.clearType = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Event.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.ContextAction.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.ContextAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.ContextAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.ContextAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    server: (f = msg.getServer()) && proto.MurmurRPC.Server.toObject(includeInstance, f),
    context: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    action: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    text: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    actor: (f = msg.getActor()) && proto.MurmurRPC.User.toObject(includeInstance, f),
    user: (f = msg.getUser()) && proto.MurmurRPC.User.toObject(includeInstance, f),
    channel: (f = msg.getChannel()) && proto.MurmurRPC.Channel.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.ContextAction}
 */
proto.MurmurRPC.ContextAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.ContextAction;
  return proto.MurmurRPC.ContextAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.ContextAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.ContextAction}
 */
proto.MurmurRPC.ContextAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MurmurRPC.Server;
      reader.readMessage(value,proto.MurmurRPC.Server.deserializeBinaryFromReader);
      msg.setServer(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setContext(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAction(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 5:
      var value = new proto.MurmurRPC.User;
      reader.readMessage(value,proto.MurmurRPC.User.deserializeBinaryFromReader);
      msg.setActor(value);
      break;
    case 6:
      var value = new proto.MurmurRPC.User;
      reader.readMessage(value,proto.MurmurRPC.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 7:
      var value = new proto.MurmurRPC.Channel;
      reader.readMessage(value,proto.MurmurRPC.Channel.deserializeBinaryFromReader);
      msg.setChannel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.ContextAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.ContextAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.ContextAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.ContextAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MurmurRPC.Server.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getActor();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.MurmurRPC.User.serializeBinaryToWriter
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.MurmurRPC.User.serializeBinaryToWriter
    );
  }
  f = message.getChannel();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.MurmurRPC.Channel.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.MurmurRPC.ContextAction.Context = {
  SERVER: 1,
  CHANNEL: 2,
  USER: 4
};

/**
 * optional Server server = 1;
 * @return {?proto.MurmurRPC.Server}
 */
proto.MurmurRPC.ContextAction.prototype.getServer = function() {
  return /** @type{?proto.MurmurRPC.Server} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Server, 1));
};


/**
 * @param {?proto.MurmurRPC.Server|undefined} value
 * @return {!proto.MurmurRPC.ContextAction} returns this
*/
proto.MurmurRPC.ContextAction.prototype.setServer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.ContextAction} returns this
 */
proto.MurmurRPC.ContextAction.prototype.clearServer = function() {
  return this.setServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.ContextAction.prototype.hasServer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 context = 2;
 * @return {number}
 */
proto.MurmurRPC.ContextAction.prototype.getContext = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.MurmurRPC.ContextAction} returns this
 */
proto.MurmurRPC.ContextAction.prototype.setContext = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.ContextAction} returns this
 */
proto.MurmurRPC.ContextAction.prototype.clearContext = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.ContextAction.prototype.hasContext = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string action = 3;
 * @return {string}
 */
proto.MurmurRPC.ContextAction.prototype.getAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.MurmurRPC.ContextAction} returns this
 */
proto.MurmurRPC.ContextAction.prototype.setAction = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.ContextAction} returns this
 */
proto.MurmurRPC.ContextAction.prototype.clearAction = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.ContextAction.prototype.hasAction = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string text = 4;
 * @return {string}
 */
proto.MurmurRPC.ContextAction.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.MurmurRPC.ContextAction} returns this
 */
proto.MurmurRPC.ContextAction.prototype.setText = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.ContextAction} returns this
 */
proto.MurmurRPC.ContextAction.prototype.clearText = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.ContextAction.prototype.hasText = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional User actor = 5;
 * @return {?proto.MurmurRPC.User}
 */
proto.MurmurRPC.ContextAction.prototype.getActor = function() {
  return /** @type{?proto.MurmurRPC.User} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.User, 5));
};


/**
 * @param {?proto.MurmurRPC.User|undefined} value
 * @return {!proto.MurmurRPC.ContextAction} returns this
*/
proto.MurmurRPC.ContextAction.prototype.setActor = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.ContextAction} returns this
 */
proto.MurmurRPC.ContextAction.prototype.clearActor = function() {
  return this.setActor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.ContextAction.prototype.hasActor = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional User user = 6;
 * @return {?proto.MurmurRPC.User}
 */
proto.MurmurRPC.ContextAction.prototype.getUser = function() {
  return /** @type{?proto.MurmurRPC.User} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.User, 6));
};


/**
 * @param {?proto.MurmurRPC.User|undefined} value
 * @return {!proto.MurmurRPC.ContextAction} returns this
*/
proto.MurmurRPC.ContextAction.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.ContextAction} returns this
 */
proto.MurmurRPC.ContextAction.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.ContextAction.prototype.hasUser = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Channel channel = 7;
 * @return {?proto.MurmurRPC.Channel}
 */
proto.MurmurRPC.ContextAction.prototype.getChannel = function() {
  return /** @type{?proto.MurmurRPC.Channel} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Channel, 7));
};


/**
 * @param {?proto.MurmurRPC.Channel|undefined} value
 * @return {!proto.MurmurRPC.ContextAction} returns this
*/
proto.MurmurRPC.ContextAction.prototype.setChannel = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.ContextAction} returns this
 */
proto.MurmurRPC.ContextAction.prototype.clearChannel = function() {
  return this.setChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.ContextAction.prototype.hasChannel = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MurmurRPC.TextMessage.repeatedFields_ = [3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.TextMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.TextMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.TextMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.TextMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    server: (f = msg.getServer()) && proto.MurmurRPC.Server.toObject(includeInstance, f),
    actor: (f = msg.getActor()) && proto.MurmurRPC.User.toObject(includeInstance, f),
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    proto.MurmurRPC.User.toObject, includeInstance),
    channelsList: jspb.Message.toObjectList(msg.getChannelsList(),
    proto.MurmurRPC.Channel.toObject, includeInstance),
    treesList: jspb.Message.toObjectList(msg.getTreesList(),
    proto.MurmurRPC.Channel.toObject, includeInstance),
    text: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.TextMessage}
 */
proto.MurmurRPC.TextMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.TextMessage;
  return proto.MurmurRPC.TextMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.TextMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.TextMessage}
 */
proto.MurmurRPC.TextMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MurmurRPC.Server;
      reader.readMessage(value,proto.MurmurRPC.Server.deserializeBinaryFromReader);
      msg.setServer(value);
      break;
    case 2:
      var value = new proto.MurmurRPC.User;
      reader.readMessage(value,proto.MurmurRPC.User.deserializeBinaryFromReader);
      msg.setActor(value);
      break;
    case 3:
      var value = new proto.MurmurRPC.User;
      reader.readMessage(value,proto.MurmurRPC.User.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    case 4:
      var value = new proto.MurmurRPC.Channel;
      reader.readMessage(value,proto.MurmurRPC.Channel.deserializeBinaryFromReader);
      msg.addChannels(value);
      break;
    case 5:
      var value = new proto.MurmurRPC.Channel;
      reader.readMessage(value,proto.MurmurRPC.Channel.deserializeBinaryFromReader);
      msg.addTrees(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.TextMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.TextMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.TextMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.TextMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MurmurRPC.Server.serializeBinaryToWriter
    );
  }
  f = message.getActor();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.MurmurRPC.User.serializeBinaryToWriter
    );
  }
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.MurmurRPC.User.serializeBinaryToWriter
    );
  }
  f = message.getChannelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.MurmurRPC.Channel.serializeBinaryToWriter
    );
  }
  f = message.getTreesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.MurmurRPC.Channel.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.TextMessage.Filter.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.TextMessage.Filter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.TextMessage.Filter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.TextMessage.Filter.toObject = function(includeInstance, msg) {
  var f, obj = {
    server: (f = msg.getServer()) && proto.MurmurRPC.Server.toObject(includeInstance, f),
    action: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    message: (f = msg.getMessage()) && proto.MurmurRPC.TextMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.TextMessage.Filter}
 */
proto.MurmurRPC.TextMessage.Filter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.TextMessage.Filter;
  return proto.MurmurRPC.TextMessage.Filter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.TextMessage.Filter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.TextMessage.Filter}
 */
proto.MurmurRPC.TextMessage.Filter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MurmurRPC.Server;
      reader.readMessage(value,proto.MurmurRPC.Server.deserializeBinaryFromReader);
      msg.setServer(value);
      break;
    case 2:
      var value = /** @type {!proto.MurmurRPC.TextMessage.Filter.Action} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 3:
      var value = new proto.MurmurRPC.TextMessage;
      reader.readMessage(value,proto.MurmurRPC.TextMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.TextMessage.Filter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.TextMessage.Filter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.TextMessage.Filter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.TextMessage.Filter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MurmurRPC.Server.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.MurmurRPC.TextMessage.Filter.Action} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.MurmurRPC.TextMessage.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.MurmurRPC.TextMessage.Filter.Action = {
  ACCEPT: 0,
  REJECT: 1,
  DROP: 2
};

/**
 * optional Server server = 1;
 * @return {?proto.MurmurRPC.Server}
 */
proto.MurmurRPC.TextMessage.Filter.prototype.getServer = function() {
  return /** @type{?proto.MurmurRPC.Server} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Server, 1));
};


/**
 * @param {?proto.MurmurRPC.Server|undefined} value
 * @return {!proto.MurmurRPC.TextMessage.Filter} returns this
*/
proto.MurmurRPC.TextMessage.Filter.prototype.setServer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.TextMessage.Filter} returns this
 */
proto.MurmurRPC.TextMessage.Filter.prototype.clearServer = function() {
  return this.setServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.TextMessage.Filter.prototype.hasServer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Action action = 2;
 * @return {!proto.MurmurRPC.TextMessage.Filter.Action}
 */
proto.MurmurRPC.TextMessage.Filter.prototype.getAction = function() {
  return /** @type {!proto.MurmurRPC.TextMessage.Filter.Action} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.MurmurRPC.TextMessage.Filter.Action} value
 * @return {!proto.MurmurRPC.TextMessage.Filter} returns this
 */
proto.MurmurRPC.TextMessage.Filter.prototype.setAction = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.TextMessage.Filter} returns this
 */
proto.MurmurRPC.TextMessage.Filter.prototype.clearAction = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.TextMessage.Filter.prototype.hasAction = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TextMessage message = 3;
 * @return {?proto.MurmurRPC.TextMessage}
 */
proto.MurmurRPC.TextMessage.Filter.prototype.getMessage = function() {
  return /** @type{?proto.MurmurRPC.TextMessage} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.TextMessage, 3));
};


/**
 * @param {?proto.MurmurRPC.TextMessage|undefined} value
 * @return {!proto.MurmurRPC.TextMessage.Filter} returns this
*/
proto.MurmurRPC.TextMessage.Filter.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.TextMessage.Filter} returns this
 */
proto.MurmurRPC.TextMessage.Filter.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.TextMessage.Filter.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Server server = 1;
 * @return {?proto.MurmurRPC.Server}
 */
proto.MurmurRPC.TextMessage.prototype.getServer = function() {
  return /** @type{?proto.MurmurRPC.Server} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Server, 1));
};


/**
 * @param {?proto.MurmurRPC.Server|undefined} value
 * @return {!proto.MurmurRPC.TextMessage} returns this
*/
proto.MurmurRPC.TextMessage.prototype.setServer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.TextMessage} returns this
 */
proto.MurmurRPC.TextMessage.prototype.clearServer = function() {
  return this.setServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.TextMessage.prototype.hasServer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional User actor = 2;
 * @return {?proto.MurmurRPC.User}
 */
proto.MurmurRPC.TextMessage.prototype.getActor = function() {
  return /** @type{?proto.MurmurRPC.User} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.User, 2));
};


/**
 * @param {?proto.MurmurRPC.User|undefined} value
 * @return {!proto.MurmurRPC.TextMessage} returns this
*/
proto.MurmurRPC.TextMessage.prototype.setActor = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.TextMessage} returns this
 */
proto.MurmurRPC.TextMessage.prototype.clearActor = function() {
  return this.setActor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.TextMessage.prototype.hasActor = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated User users = 3;
 * @return {!Array<!proto.MurmurRPC.User>}
 */
proto.MurmurRPC.TextMessage.prototype.getUsersList = function() {
  return /** @type{!Array<!proto.MurmurRPC.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MurmurRPC.User, 3));
};


/**
 * @param {!Array<!proto.MurmurRPC.User>} value
 * @return {!proto.MurmurRPC.TextMessage} returns this
*/
proto.MurmurRPC.TextMessage.prototype.setUsersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.MurmurRPC.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MurmurRPC.User}
 */
proto.MurmurRPC.TextMessage.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.MurmurRPC.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MurmurRPC.TextMessage} returns this
 */
proto.MurmurRPC.TextMessage.prototype.clearUsersList = function() {
  return this.setUsersList([]);
};


/**
 * repeated Channel channels = 4;
 * @return {!Array<!proto.MurmurRPC.Channel>}
 */
proto.MurmurRPC.TextMessage.prototype.getChannelsList = function() {
  return /** @type{!Array<!proto.MurmurRPC.Channel>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MurmurRPC.Channel, 4));
};


/**
 * @param {!Array<!proto.MurmurRPC.Channel>} value
 * @return {!proto.MurmurRPC.TextMessage} returns this
*/
proto.MurmurRPC.TextMessage.prototype.setChannelsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.MurmurRPC.Channel=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MurmurRPC.Channel}
 */
proto.MurmurRPC.TextMessage.prototype.addChannels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.MurmurRPC.Channel, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MurmurRPC.TextMessage} returns this
 */
proto.MurmurRPC.TextMessage.prototype.clearChannelsList = function() {
  return this.setChannelsList([]);
};


/**
 * repeated Channel trees = 5;
 * @return {!Array<!proto.MurmurRPC.Channel>}
 */
proto.MurmurRPC.TextMessage.prototype.getTreesList = function() {
  return /** @type{!Array<!proto.MurmurRPC.Channel>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MurmurRPC.Channel, 5));
};


/**
 * @param {!Array<!proto.MurmurRPC.Channel>} value
 * @return {!proto.MurmurRPC.TextMessage} returns this
*/
proto.MurmurRPC.TextMessage.prototype.setTreesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.MurmurRPC.Channel=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MurmurRPC.Channel}
 */
proto.MurmurRPC.TextMessage.prototype.addTrees = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.MurmurRPC.Channel, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MurmurRPC.TextMessage} returns this
 */
proto.MurmurRPC.TextMessage.prototype.clearTreesList = function() {
  return this.setTreesList([]);
};


/**
 * optional string text = 6;
 * @return {string}
 */
proto.MurmurRPC.TextMessage.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.MurmurRPC.TextMessage} returns this
 */
proto.MurmurRPC.TextMessage.prototype.setText = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.TextMessage} returns this
 */
proto.MurmurRPC.TextMessage.prototype.clearText = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.TextMessage.prototype.hasText = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.Log.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.Log.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.Log} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Log.toObject = function(includeInstance, msg) {
  var f, obj = {
    server: (f = msg.getServer()) && proto.MurmurRPC.Server.toObject(includeInstance, f),
    timestamp: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    text: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.Log}
 */
proto.MurmurRPC.Log.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.Log;
  return proto.MurmurRPC.Log.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.Log} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.Log}
 */
proto.MurmurRPC.Log.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MurmurRPC.Server;
      reader.readMessage(value,proto.MurmurRPC.Server.deserializeBinaryFromReader);
      msg.setServer(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.Log.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.Log.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.Log} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Log.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MurmurRPC.Server.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.Log.Query.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.Log.Query.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.Log.Query} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Log.Query.toObject = function(includeInstance, msg) {
  var f, obj = {
    server: (f = msg.getServer()) && proto.MurmurRPC.Server.toObject(includeInstance, f),
    min: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    max: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.Log.Query}
 */
proto.MurmurRPC.Log.Query.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.Log.Query;
  return proto.MurmurRPC.Log.Query.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.Log.Query} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.Log.Query}
 */
proto.MurmurRPC.Log.Query.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MurmurRPC.Server;
      reader.readMessage(value,proto.MurmurRPC.Server.deserializeBinaryFromReader);
      msg.setServer(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMin(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMax(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.Log.Query.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.Log.Query.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.Log.Query} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Log.Query.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MurmurRPC.Server.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional Server server = 1;
 * @return {?proto.MurmurRPC.Server}
 */
proto.MurmurRPC.Log.Query.prototype.getServer = function() {
  return /** @type{?proto.MurmurRPC.Server} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Server, 1));
};


/**
 * @param {?proto.MurmurRPC.Server|undefined} value
 * @return {!proto.MurmurRPC.Log.Query} returns this
*/
proto.MurmurRPC.Log.Query.prototype.setServer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.Log.Query} returns this
 */
proto.MurmurRPC.Log.Query.prototype.clearServer = function() {
  return this.setServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Log.Query.prototype.hasServer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 min = 2;
 * @return {number}
 */
proto.MurmurRPC.Log.Query.prototype.getMin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.MurmurRPC.Log.Query} returns this
 */
proto.MurmurRPC.Log.Query.prototype.setMin = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Log.Query} returns this
 */
proto.MurmurRPC.Log.Query.prototype.clearMin = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Log.Query.prototype.hasMin = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 max = 3;
 * @return {number}
 */
proto.MurmurRPC.Log.Query.prototype.getMax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.MurmurRPC.Log.Query} returns this
 */
proto.MurmurRPC.Log.Query.prototype.setMax = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Log.Query} returns this
 */
proto.MurmurRPC.Log.Query.prototype.clearMax = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Log.Query.prototype.hasMax = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MurmurRPC.Log.List.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.Log.List.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.Log.List.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.Log.List} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Log.List.toObject = function(includeInstance, msg) {
  var f, obj = {
    server: (f = msg.getServer()) && proto.MurmurRPC.Server.toObject(includeInstance, f),
    total: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    min: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    max: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    entriesList: jspb.Message.toObjectList(msg.getEntriesList(),
    proto.MurmurRPC.Log.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.Log.List}
 */
proto.MurmurRPC.Log.List.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.Log.List;
  return proto.MurmurRPC.Log.List.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.Log.List} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.Log.List}
 */
proto.MurmurRPC.Log.List.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MurmurRPC.Server;
      reader.readMessage(value,proto.MurmurRPC.Server.deserializeBinaryFromReader);
      msg.setServer(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotal(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMin(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMax(value);
      break;
    case 5:
      var value = new proto.MurmurRPC.Log;
      reader.readMessage(value,proto.MurmurRPC.Log.deserializeBinaryFromReader);
      msg.addEntries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.Log.List.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.Log.List.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.Log.List} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Log.List.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MurmurRPC.Server.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getEntriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.MurmurRPC.Log.serializeBinaryToWriter
    );
  }
};


/**
 * optional Server server = 1;
 * @return {?proto.MurmurRPC.Server}
 */
proto.MurmurRPC.Log.List.prototype.getServer = function() {
  return /** @type{?proto.MurmurRPC.Server} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Server, 1));
};


/**
 * @param {?proto.MurmurRPC.Server|undefined} value
 * @return {!proto.MurmurRPC.Log.List} returns this
*/
proto.MurmurRPC.Log.List.prototype.setServer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.Log.List} returns this
 */
proto.MurmurRPC.Log.List.prototype.clearServer = function() {
  return this.setServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Log.List.prototype.hasServer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 total = 2;
 * @return {number}
 */
proto.MurmurRPC.Log.List.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.MurmurRPC.Log.List} returns this
 */
proto.MurmurRPC.Log.List.prototype.setTotal = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Log.List} returns this
 */
proto.MurmurRPC.Log.List.prototype.clearTotal = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Log.List.prototype.hasTotal = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 min = 3;
 * @return {number}
 */
proto.MurmurRPC.Log.List.prototype.getMin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.MurmurRPC.Log.List} returns this
 */
proto.MurmurRPC.Log.List.prototype.setMin = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Log.List} returns this
 */
proto.MurmurRPC.Log.List.prototype.clearMin = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Log.List.prototype.hasMin = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 max = 4;
 * @return {number}
 */
proto.MurmurRPC.Log.List.prototype.getMax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.MurmurRPC.Log.List} returns this
 */
proto.MurmurRPC.Log.List.prototype.setMax = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Log.List} returns this
 */
proto.MurmurRPC.Log.List.prototype.clearMax = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Log.List.prototype.hasMax = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated Log entries = 5;
 * @return {!Array<!proto.MurmurRPC.Log>}
 */
proto.MurmurRPC.Log.List.prototype.getEntriesList = function() {
  return /** @type{!Array<!proto.MurmurRPC.Log>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MurmurRPC.Log, 5));
};


/**
 * @param {!Array<!proto.MurmurRPC.Log>} value
 * @return {!proto.MurmurRPC.Log.List} returns this
*/
proto.MurmurRPC.Log.List.prototype.setEntriesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.MurmurRPC.Log=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MurmurRPC.Log}
 */
proto.MurmurRPC.Log.List.prototype.addEntries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.MurmurRPC.Log, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MurmurRPC.Log.List} returns this
 */
proto.MurmurRPC.Log.List.prototype.clearEntriesList = function() {
  return this.setEntriesList([]);
};


/**
 * optional Server server = 1;
 * @return {?proto.MurmurRPC.Server}
 */
proto.MurmurRPC.Log.prototype.getServer = function() {
  return /** @type{?proto.MurmurRPC.Server} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Server, 1));
};


/**
 * @param {?proto.MurmurRPC.Server|undefined} value
 * @return {!proto.MurmurRPC.Log} returns this
*/
proto.MurmurRPC.Log.prototype.setServer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.Log} returns this
 */
proto.MurmurRPC.Log.prototype.clearServer = function() {
  return this.setServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Log.prototype.hasServer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 timestamp = 2;
 * @return {number}
 */
proto.MurmurRPC.Log.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.MurmurRPC.Log} returns this
 */
proto.MurmurRPC.Log.prototype.setTimestamp = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Log} returns this
 */
proto.MurmurRPC.Log.prototype.clearTimestamp = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Log.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string text = 3;
 * @return {string}
 */
proto.MurmurRPC.Log.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.MurmurRPC.Log} returns this
 */
proto.MurmurRPC.Log.prototype.setText = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Log} returns this
 */
proto.MurmurRPC.Log.prototype.clearText = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Log.prototype.hasText = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.Config.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.Config.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.Config} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Config.toObject = function(includeInstance, msg) {
  var f, obj = {
    server: (f = msg.getServer()) && proto.MurmurRPC.Server.toObject(includeInstance, f),
    fieldsMap: (f = msg.getFieldsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.Config}
 */
proto.MurmurRPC.Config.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.Config;
  return proto.MurmurRPC.Config.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.Config} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.Config}
 */
proto.MurmurRPC.Config.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MurmurRPC.Server;
      reader.readMessage(value,proto.MurmurRPC.Server.deserializeBinaryFromReader);
      msg.setServer(value);
      break;
    case 2:
      var value = msg.getFieldsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.Config.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.Config.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.Config} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Config.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MurmurRPC.Server.serializeBinaryToWriter
    );
  }
  f = message.getFieldsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.Config.Field.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.Config.Field.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.Config.Field} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Config.Field.toObject = function(includeInstance, msg) {
  var f, obj = {
    server: (f = msg.getServer()) && proto.MurmurRPC.Server.toObject(includeInstance, f),
    key: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    value: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.Config.Field}
 */
proto.MurmurRPC.Config.Field.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.Config.Field;
  return proto.MurmurRPC.Config.Field.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.Config.Field} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.Config.Field}
 */
proto.MurmurRPC.Config.Field.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MurmurRPC.Server;
      reader.readMessage(value,proto.MurmurRPC.Server.deserializeBinaryFromReader);
      msg.setServer(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.Config.Field.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.Config.Field.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.Config.Field} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Config.Field.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MurmurRPC.Server.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional Server server = 1;
 * @return {?proto.MurmurRPC.Server}
 */
proto.MurmurRPC.Config.Field.prototype.getServer = function() {
  return /** @type{?proto.MurmurRPC.Server} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Server, 1));
};


/**
 * @param {?proto.MurmurRPC.Server|undefined} value
 * @return {!proto.MurmurRPC.Config.Field} returns this
*/
proto.MurmurRPC.Config.Field.prototype.setServer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.Config.Field} returns this
 */
proto.MurmurRPC.Config.Field.prototype.clearServer = function() {
  return this.setServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Config.Field.prototype.hasServer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string key = 2;
 * @return {string}
 */
proto.MurmurRPC.Config.Field.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.MurmurRPC.Config.Field} returns this
 */
proto.MurmurRPC.Config.Field.prototype.setKey = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Config.Field} returns this
 */
proto.MurmurRPC.Config.Field.prototype.clearKey = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Config.Field.prototype.hasKey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string value = 3;
 * @return {string}
 */
proto.MurmurRPC.Config.Field.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.MurmurRPC.Config.Field} returns this
 */
proto.MurmurRPC.Config.Field.prototype.setValue = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Config.Field} returns this
 */
proto.MurmurRPC.Config.Field.prototype.clearValue = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Config.Field.prototype.hasValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Server server = 1;
 * @return {?proto.MurmurRPC.Server}
 */
proto.MurmurRPC.Config.prototype.getServer = function() {
  return /** @type{?proto.MurmurRPC.Server} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Server, 1));
};


/**
 * @param {?proto.MurmurRPC.Server|undefined} value
 * @return {!proto.MurmurRPC.Config} returns this
*/
proto.MurmurRPC.Config.prototype.setServer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.Config} returns this
 */
proto.MurmurRPC.Config.prototype.clearServer = function() {
  return this.setServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Config.prototype.hasServer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * map<string, string> fields = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.MurmurRPC.Config.prototype.getFieldsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.MurmurRPC.Config} returns this
 */
proto.MurmurRPC.Config.prototype.clearFieldsMap = function() {
  this.getFieldsMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MurmurRPC.Channel.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.Channel.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.Channel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.Channel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Channel.toObject = function(includeInstance, msg) {
  var f, obj = {
    server: (f = msg.getServer()) && proto.MurmurRPC.Server.toObject(includeInstance, f),
    id: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    name: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    parent: (f = msg.getParent()) && proto.MurmurRPC.Channel.toObject(includeInstance, f),
    linksList: jspb.Message.toObjectList(msg.getLinksList(),
    proto.MurmurRPC.Channel.toObject, includeInstance),
    description: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    temporary: (f = jspb.Message.getBooleanField(msg, 7)) == null ? undefined : f,
    position: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.Channel}
 */
proto.MurmurRPC.Channel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.Channel;
  return proto.MurmurRPC.Channel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.Channel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.Channel}
 */
proto.MurmurRPC.Channel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MurmurRPC.Server;
      reader.readMessage(value,proto.MurmurRPC.Server.deserializeBinaryFromReader);
      msg.setServer(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = new proto.MurmurRPC.Channel;
      reader.readMessage(value,proto.MurmurRPC.Channel.deserializeBinaryFromReader);
      msg.setParent(value);
      break;
    case 5:
      var value = new proto.MurmurRPC.Channel;
      reader.readMessage(value,proto.MurmurRPC.Channel.deserializeBinaryFromReader);
      msg.addLinks(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTemporary(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.Channel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.Channel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.Channel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Channel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MurmurRPC.Server.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getParent();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.MurmurRPC.Channel.serializeBinaryToWriter
    );
  }
  f = message.getLinksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.MurmurRPC.Channel.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.Channel.Query.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.Channel.Query.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.Channel.Query} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Channel.Query.toObject = function(includeInstance, msg) {
  var f, obj = {
    server: (f = msg.getServer()) && proto.MurmurRPC.Server.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.Channel.Query}
 */
proto.MurmurRPC.Channel.Query.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.Channel.Query;
  return proto.MurmurRPC.Channel.Query.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.Channel.Query} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.Channel.Query}
 */
proto.MurmurRPC.Channel.Query.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MurmurRPC.Server;
      reader.readMessage(value,proto.MurmurRPC.Server.deserializeBinaryFromReader);
      msg.setServer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.Channel.Query.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.Channel.Query.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.Channel.Query} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Channel.Query.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MurmurRPC.Server.serializeBinaryToWriter
    );
  }
};


/**
 * optional Server server = 1;
 * @return {?proto.MurmurRPC.Server}
 */
proto.MurmurRPC.Channel.Query.prototype.getServer = function() {
  return /** @type{?proto.MurmurRPC.Server} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Server, 1));
};


/**
 * @param {?proto.MurmurRPC.Server|undefined} value
 * @return {!proto.MurmurRPC.Channel.Query} returns this
*/
proto.MurmurRPC.Channel.Query.prototype.setServer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.Channel.Query} returns this
 */
proto.MurmurRPC.Channel.Query.prototype.clearServer = function() {
  return this.setServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Channel.Query.prototype.hasServer = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MurmurRPC.Channel.List.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.Channel.List.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.Channel.List.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.Channel.List} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Channel.List.toObject = function(includeInstance, msg) {
  var f, obj = {
    server: (f = msg.getServer()) && proto.MurmurRPC.Server.toObject(includeInstance, f),
    channelsList: jspb.Message.toObjectList(msg.getChannelsList(),
    proto.MurmurRPC.Channel.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.Channel.List}
 */
proto.MurmurRPC.Channel.List.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.Channel.List;
  return proto.MurmurRPC.Channel.List.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.Channel.List} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.Channel.List}
 */
proto.MurmurRPC.Channel.List.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MurmurRPC.Server;
      reader.readMessage(value,proto.MurmurRPC.Server.deserializeBinaryFromReader);
      msg.setServer(value);
      break;
    case 2:
      var value = new proto.MurmurRPC.Channel;
      reader.readMessage(value,proto.MurmurRPC.Channel.deserializeBinaryFromReader);
      msg.addChannels(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.Channel.List.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.Channel.List.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.Channel.List} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Channel.List.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MurmurRPC.Server.serializeBinaryToWriter
    );
  }
  f = message.getChannelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.MurmurRPC.Channel.serializeBinaryToWriter
    );
  }
};


/**
 * optional Server server = 1;
 * @return {?proto.MurmurRPC.Server}
 */
proto.MurmurRPC.Channel.List.prototype.getServer = function() {
  return /** @type{?proto.MurmurRPC.Server} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Server, 1));
};


/**
 * @param {?proto.MurmurRPC.Server|undefined} value
 * @return {!proto.MurmurRPC.Channel.List} returns this
*/
proto.MurmurRPC.Channel.List.prototype.setServer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.Channel.List} returns this
 */
proto.MurmurRPC.Channel.List.prototype.clearServer = function() {
  return this.setServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Channel.List.prototype.hasServer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Channel channels = 2;
 * @return {!Array<!proto.MurmurRPC.Channel>}
 */
proto.MurmurRPC.Channel.List.prototype.getChannelsList = function() {
  return /** @type{!Array<!proto.MurmurRPC.Channel>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MurmurRPC.Channel, 2));
};


/**
 * @param {!Array<!proto.MurmurRPC.Channel>} value
 * @return {!proto.MurmurRPC.Channel.List} returns this
*/
proto.MurmurRPC.Channel.List.prototype.setChannelsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.MurmurRPC.Channel=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MurmurRPC.Channel}
 */
proto.MurmurRPC.Channel.List.prototype.addChannels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.MurmurRPC.Channel, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MurmurRPC.Channel.List} returns this
 */
proto.MurmurRPC.Channel.List.prototype.clearChannelsList = function() {
  return this.setChannelsList([]);
};


/**
 * optional Server server = 1;
 * @return {?proto.MurmurRPC.Server}
 */
proto.MurmurRPC.Channel.prototype.getServer = function() {
  return /** @type{?proto.MurmurRPC.Server} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Server, 1));
};


/**
 * @param {?proto.MurmurRPC.Server|undefined} value
 * @return {!proto.MurmurRPC.Channel} returns this
*/
proto.MurmurRPC.Channel.prototype.setServer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.Channel} returns this
 */
proto.MurmurRPC.Channel.prototype.clearServer = function() {
  return this.setServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Channel.prototype.hasServer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 id = 2;
 * @return {number}
 */
proto.MurmurRPC.Channel.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.MurmurRPC.Channel} returns this
 */
proto.MurmurRPC.Channel.prototype.setId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Channel} returns this
 */
proto.MurmurRPC.Channel.prototype.clearId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Channel.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.MurmurRPC.Channel.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.MurmurRPC.Channel} returns this
 */
proto.MurmurRPC.Channel.prototype.setName = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Channel} returns this
 */
proto.MurmurRPC.Channel.prototype.clearName = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Channel.prototype.hasName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Channel parent = 4;
 * @return {?proto.MurmurRPC.Channel}
 */
proto.MurmurRPC.Channel.prototype.getParent = function() {
  return /** @type{?proto.MurmurRPC.Channel} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Channel, 4));
};


/**
 * @param {?proto.MurmurRPC.Channel|undefined} value
 * @return {!proto.MurmurRPC.Channel} returns this
*/
proto.MurmurRPC.Channel.prototype.setParent = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.Channel} returns this
 */
proto.MurmurRPC.Channel.prototype.clearParent = function() {
  return this.setParent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Channel.prototype.hasParent = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated Channel links = 5;
 * @return {!Array<!proto.MurmurRPC.Channel>}
 */
proto.MurmurRPC.Channel.prototype.getLinksList = function() {
  return /** @type{!Array<!proto.MurmurRPC.Channel>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MurmurRPC.Channel, 5));
};


/**
 * @param {!Array<!proto.MurmurRPC.Channel>} value
 * @return {!proto.MurmurRPC.Channel} returns this
*/
proto.MurmurRPC.Channel.prototype.setLinksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.MurmurRPC.Channel=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MurmurRPC.Channel}
 */
proto.MurmurRPC.Channel.prototype.addLinks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.MurmurRPC.Channel, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MurmurRPC.Channel} returns this
 */
proto.MurmurRPC.Channel.prototype.clearLinksList = function() {
  return this.setLinksList([]);
};


/**
 * optional string description = 6;
 * @return {string}
 */
proto.MurmurRPC.Channel.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.MurmurRPC.Channel} returns this
 */
proto.MurmurRPC.Channel.prototype.setDescription = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Channel} returns this
 */
proto.MurmurRPC.Channel.prototype.clearDescription = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Channel.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool temporary = 7;
 * @return {boolean}
 */
proto.MurmurRPC.Channel.prototype.getTemporary = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MurmurRPC.Channel} returns this
 */
proto.MurmurRPC.Channel.prototype.setTemporary = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Channel} returns this
 */
proto.MurmurRPC.Channel.prototype.clearTemporary = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Channel.prototype.hasTemporary = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int32 position = 8;
 * @return {number}
 */
proto.MurmurRPC.Channel.prototype.getPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.MurmurRPC.Channel} returns this
 */
proto.MurmurRPC.Channel.prototype.setPosition = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Channel} returns this
 */
proto.MurmurRPC.Channel.prototype.clearPosition = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Channel.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.User.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    server: (f = msg.getServer()) && proto.MurmurRPC.Server.toObject(includeInstance, f),
    session: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    id: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    name: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    mute: (f = jspb.Message.getBooleanField(msg, 5)) == null ? undefined : f,
    deaf: (f = jspb.Message.getBooleanField(msg, 6)) == null ? undefined : f,
    suppress: (f = jspb.Message.getBooleanField(msg, 7)) == null ? undefined : f,
    prioritySpeaker: (f = jspb.Message.getBooleanField(msg, 8)) == null ? undefined : f,
    selfMute: (f = jspb.Message.getBooleanField(msg, 9)) == null ? undefined : f,
    selfDeaf: (f = jspb.Message.getBooleanField(msg, 10)) == null ? undefined : f,
    recording: (f = jspb.Message.getBooleanField(msg, 11)) == null ? undefined : f,
    channel: (f = msg.getChannel()) && proto.MurmurRPC.Channel.toObject(includeInstance, f),
    onlineSecs: (f = jspb.Message.getField(msg, 13)) == null ? undefined : f,
    idleSecs: (f = jspb.Message.getField(msg, 14)) == null ? undefined : f,
    bytesPerSec: (f = jspb.Message.getField(msg, 15)) == null ? undefined : f,
    version: (f = msg.getVersion()) && proto.MurmurRPC.Version.toObject(includeInstance, f),
    pluginContext: msg.getPluginContext_asB64(),
    pluginIdentity: (f = jspb.Message.getField(msg, 18)) == null ? undefined : f,
    comment: (f = jspb.Message.getField(msg, 19)) == null ? undefined : f,
    texture: msg.getTexture_asB64(),
    address: msg.getAddress_asB64(),
    tcpOnly: (f = jspb.Message.getBooleanField(msg, 22)) == null ? undefined : f,
    udpPingMsecs: (f = jspb.Message.getOptionalFloatingPointField(msg, 23)) == null ? undefined : f,
    tcpPingMsecs: (f = jspb.Message.getOptionalFloatingPointField(msg, 24)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.User}
 */
proto.MurmurRPC.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.User;
  return proto.MurmurRPC.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.User}
 */
proto.MurmurRPC.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MurmurRPC.Server;
      reader.readMessage(value,proto.MurmurRPC.Server.deserializeBinaryFromReader);
      msg.setServer(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSession(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMute(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeaf(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuppress(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPrioritySpeaker(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSelfMute(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSelfDeaf(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRecording(value);
      break;
    case 12:
      var value = new proto.MurmurRPC.Channel;
      reader.readMessage(value,proto.MurmurRPC.Channel.deserializeBinaryFromReader);
      msg.setChannel(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOnlineSecs(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIdleSecs(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBytesPerSec(value);
      break;
    case 16:
      var value = new proto.MurmurRPC.Version;
      reader.readMessage(value,proto.MurmurRPC.Version.deserializeBinaryFromReader);
      msg.setVersion(value);
      break;
    case 17:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPluginContext(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setPluginIdentity(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setComment(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTexture(value);
      break;
    case 21:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 22:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTcpOnly(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setUdpPingMsecs(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTcpPingMsecs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MurmurRPC.Server.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeBool(
      10,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getChannel();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.MurmurRPC.Channel.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeUint32(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeUint32(
      15,
      f
    );
  }
  f = message.getVersion();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.MurmurRPC.Version.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeBytes(
      17,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeString(
      18,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeString(
      19,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeBytes(
      21,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 22));
  if (f != null) {
    writer.writeBool(
      22,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 23));
  if (f != null) {
    writer.writeFloat(
      23,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 24));
  if (f != null) {
    writer.writeFloat(
      24,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.User.Query.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.User.Query.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.User.Query} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.User.Query.toObject = function(includeInstance, msg) {
  var f, obj = {
    server: (f = msg.getServer()) && proto.MurmurRPC.Server.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.User.Query}
 */
proto.MurmurRPC.User.Query.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.User.Query;
  return proto.MurmurRPC.User.Query.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.User.Query} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.User.Query}
 */
proto.MurmurRPC.User.Query.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MurmurRPC.Server;
      reader.readMessage(value,proto.MurmurRPC.Server.deserializeBinaryFromReader);
      msg.setServer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.User.Query.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.User.Query.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.User.Query} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.User.Query.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MurmurRPC.Server.serializeBinaryToWriter
    );
  }
};


/**
 * optional Server server = 1;
 * @return {?proto.MurmurRPC.Server}
 */
proto.MurmurRPC.User.Query.prototype.getServer = function() {
  return /** @type{?proto.MurmurRPC.Server} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Server, 1));
};


/**
 * @param {?proto.MurmurRPC.Server|undefined} value
 * @return {!proto.MurmurRPC.User.Query} returns this
*/
proto.MurmurRPC.User.Query.prototype.setServer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.User.Query} returns this
 */
proto.MurmurRPC.User.Query.prototype.clearServer = function() {
  return this.setServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.User.Query.prototype.hasServer = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MurmurRPC.User.List.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.User.List.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.User.List.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.User.List} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.User.List.toObject = function(includeInstance, msg) {
  var f, obj = {
    server: (f = msg.getServer()) && proto.MurmurRPC.Server.toObject(includeInstance, f),
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    proto.MurmurRPC.User.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.User.List}
 */
proto.MurmurRPC.User.List.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.User.List;
  return proto.MurmurRPC.User.List.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.User.List} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.User.List}
 */
proto.MurmurRPC.User.List.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MurmurRPC.Server;
      reader.readMessage(value,proto.MurmurRPC.Server.deserializeBinaryFromReader);
      msg.setServer(value);
      break;
    case 2:
      var value = new proto.MurmurRPC.User;
      reader.readMessage(value,proto.MurmurRPC.User.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.User.List.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.User.List.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.User.List} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.User.List.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MurmurRPC.Server.serializeBinaryToWriter
    );
  }
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.MurmurRPC.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional Server server = 1;
 * @return {?proto.MurmurRPC.Server}
 */
proto.MurmurRPC.User.List.prototype.getServer = function() {
  return /** @type{?proto.MurmurRPC.Server} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Server, 1));
};


/**
 * @param {?proto.MurmurRPC.Server|undefined} value
 * @return {!proto.MurmurRPC.User.List} returns this
*/
proto.MurmurRPC.User.List.prototype.setServer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.User.List} returns this
 */
proto.MurmurRPC.User.List.prototype.clearServer = function() {
  return this.setServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.User.List.prototype.hasServer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated User users = 2;
 * @return {!Array<!proto.MurmurRPC.User>}
 */
proto.MurmurRPC.User.List.prototype.getUsersList = function() {
  return /** @type{!Array<!proto.MurmurRPC.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MurmurRPC.User, 2));
};


/**
 * @param {!Array<!proto.MurmurRPC.User>} value
 * @return {!proto.MurmurRPC.User.List} returns this
*/
proto.MurmurRPC.User.List.prototype.setUsersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.MurmurRPC.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MurmurRPC.User}
 */
proto.MurmurRPC.User.List.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.MurmurRPC.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MurmurRPC.User.List} returns this
 */
proto.MurmurRPC.User.List.prototype.clearUsersList = function() {
  return this.setUsersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.User.Kick.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.User.Kick.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.User.Kick} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.User.Kick.toObject = function(includeInstance, msg) {
  var f, obj = {
    server: (f = msg.getServer()) && proto.MurmurRPC.Server.toObject(includeInstance, f),
    user: (f = msg.getUser()) && proto.MurmurRPC.User.toObject(includeInstance, f),
    actor: (f = msg.getActor()) && proto.MurmurRPC.User.toObject(includeInstance, f),
    reason: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.User.Kick}
 */
proto.MurmurRPC.User.Kick.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.User.Kick;
  return proto.MurmurRPC.User.Kick.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.User.Kick} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.User.Kick}
 */
proto.MurmurRPC.User.Kick.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MurmurRPC.Server;
      reader.readMessage(value,proto.MurmurRPC.Server.deserializeBinaryFromReader);
      msg.setServer(value);
      break;
    case 2:
      var value = new proto.MurmurRPC.User;
      reader.readMessage(value,proto.MurmurRPC.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 3:
      var value = new proto.MurmurRPC.User;
      reader.readMessage(value,proto.MurmurRPC.User.deserializeBinaryFromReader);
      msg.setActor(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.User.Kick.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.User.Kick.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.User.Kick} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.User.Kick.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MurmurRPC.Server.serializeBinaryToWriter
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.MurmurRPC.User.serializeBinaryToWriter
    );
  }
  f = message.getActor();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.MurmurRPC.User.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional Server server = 1;
 * @return {?proto.MurmurRPC.Server}
 */
proto.MurmurRPC.User.Kick.prototype.getServer = function() {
  return /** @type{?proto.MurmurRPC.Server} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Server, 1));
};


/**
 * @param {?proto.MurmurRPC.Server|undefined} value
 * @return {!proto.MurmurRPC.User.Kick} returns this
*/
proto.MurmurRPC.User.Kick.prototype.setServer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.User.Kick} returns this
 */
proto.MurmurRPC.User.Kick.prototype.clearServer = function() {
  return this.setServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.User.Kick.prototype.hasServer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional User user = 2;
 * @return {?proto.MurmurRPC.User}
 */
proto.MurmurRPC.User.Kick.prototype.getUser = function() {
  return /** @type{?proto.MurmurRPC.User} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.User, 2));
};


/**
 * @param {?proto.MurmurRPC.User|undefined} value
 * @return {!proto.MurmurRPC.User.Kick} returns this
*/
proto.MurmurRPC.User.Kick.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.User.Kick} returns this
 */
proto.MurmurRPC.User.Kick.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.User.Kick.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional User actor = 3;
 * @return {?proto.MurmurRPC.User}
 */
proto.MurmurRPC.User.Kick.prototype.getActor = function() {
  return /** @type{?proto.MurmurRPC.User} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.User, 3));
};


/**
 * @param {?proto.MurmurRPC.User|undefined} value
 * @return {!proto.MurmurRPC.User.Kick} returns this
*/
proto.MurmurRPC.User.Kick.prototype.setActor = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.User.Kick} returns this
 */
proto.MurmurRPC.User.Kick.prototype.clearActor = function() {
  return this.setActor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.User.Kick.prototype.hasActor = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string reason = 4;
 * @return {string}
 */
proto.MurmurRPC.User.Kick.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.MurmurRPC.User.Kick} returns this
 */
proto.MurmurRPC.User.Kick.prototype.setReason = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.User.Kick} returns this
 */
proto.MurmurRPC.User.Kick.prototype.clearReason = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.User.Kick.prototype.hasReason = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Server server = 1;
 * @return {?proto.MurmurRPC.Server}
 */
proto.MurmurRPC.User.prototype.getServer = function() {
  return /** @type{?proto.MurmurRPC.Server} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Server, 1));
};


/**
 * @param {?proto.MurmurRPC.Server|undefined} value
 * @return {!proto.MurmurRPC.User} returns this
*/
proto.MurmurRPC.User.prototype.setServer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.clearServer = function() {
  return this.setServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.User.prototype.hasServer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 session = 2;
 * @return {number}
 */
proto.MurmurRPC.User.prototype.getSession = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.setSession = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.clearSession = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.User.prototype.hasSession = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 id = 3;
 * @return {number}
 */
proto.MurmurRPC.User.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.setId = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.clearId = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.User.prototype.hasId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.MurmurRPC.User.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.setName = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.clearName = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.User.prototype.hasName = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool mute = 5;
 * @return {boolean}
 */
proto.MurmurRPC.User.prototype.getMute = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.setMute = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.clearMute = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.User.prototype.hasMute = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool deaf = 6;
 * @return {boolean}
 */
proto.MurmurRPC.User.prototype.getDeaf = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.setDeaf = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.clearDeaf = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.User.prototype.hasDeaf = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool suppress = 7;
 * @return {boolean}
 */
proto.MurmurRPC.User.prototype.getSuppress = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.setSuppress = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.clearSuppress = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.User.prototype.hasSuppress = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool priority_speaker = 8;
 * @return {boolean}
 */
proto.MurmurRPC.User.prototype.getPrioritySpeaker = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.setPrioritySpeaker = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.clearPrioritySpeaker = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.User.prototype.hasPrioritySpeaker = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool self_mute = 9;
 * @return {boolean}
 */
proto.MurmurRPC.User.prototype.getSelfMute = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.setSelfMute = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.clearSelfMute = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.User.prototype.hasSelfMute = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bool self_deaf = 10;
 * @return {boolean}
 */
proto.MurmurRPC.User.prototype.getSelfDeaf = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.setSelfDeaf = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.clearSelfDeaf = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.User.prototype.hasSelfDeaf = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bool recording = 11;
 * @return {boolean}
 */
proto.MurmurRPC.User.prototype.getRecording = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.setRecording = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.clearRecording = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.User.prototype.hasRecording = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Channel channel = 12;
 * @return {?proto.MurmurRPC.Channel}
 */
proto.MurmurRPC.User.prototype.getChannel = function() {
  return /** @type{?proto.MurmurRPC.Channel} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Channel, 12));
};


/**
 * @param {?proto.MurmurRPC.Channel|undefined} value
 * @return {!proto.MurmurRPC.User} returns this
*/
proto.MurmurRPC.User.prototype.setChannel = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.clearChannel = function() {
  return this.setChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.User.prototype.hasChannel = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional uint32 online_secs = 13;
 * @return {number}
 */
proto.MurmurRPC.User.prototype.getOnlineSecs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.setOnlineSecs = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.clearOnlineSecs = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.User.prototype.hasOnlineSecs = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional uint32 idle_secs = 14;
 * @return {number}
 */
proto.MurmurRPC.User.prototype.getIdleSecs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.setIdleSecs = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.clearIdleSecs = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.User.prototype.hasIdleSecs = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional uint32 bytes_per_sec = 15;
 * @return {number}
 */
proto.MurmurRPC.User.prototype.getBytesPerSec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.setBytesPerSec = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.clearBytesPerSec = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.User.prototype.hasBytesPerSec = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional Version version = 16;
 * @return {?proto.MurmurRPC.Version}
 */
proto.MurmurRPC.User.prototype.getVersion = function() {
  return /** @type{?proto.MurmurRPC.Version} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Version, 16));
};


/**
 * @param {?proto.MurmurRPC.Version|undefined} value
 * @return {!proto.MurmurRPC.User} returns this
*/
proto.MurmurRPC.User.prototype.setVersion = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.clearVersion = function() {
  return this.setVersion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.User.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional bytes plugin_context = 17;
 * @return {!(string|Uint8Array)}
 */
proto.MurmurRPC.User.prototype.getPluginContext = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * optional bytes plugin_context = 17;
 * This is a type-conversion wrapper around `getPluginContext()`
 * @return {string}
 */
proto.MurmurRPC.User.prototype.getPluginContext_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPluginContext()));
};


/**
 * optional bytes plugin_context = 17;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPluginContext()`
 * @return {!Uint8Array}
 */
proto.MurmurRPC.User.prototype.getPluginContext_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPluginContext()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.setPluginContext = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.clearPluginContext = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.User.prototype.hasPluginContext = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional string plugin_identity = 18;
 * @return {string}
 */
proto.MurmurRPC.User.prototype.getPluginIdentity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.setPluginIdentity = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.clearPluginIdentity = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.User.prototype.hasPluginIdentity = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional string comment = 19;
 * @return {string}
 */
proto.MurmurRPC.User.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/**
 * @param {string} value
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.setComment = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.clearComment = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.User.prototype.hasComment = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional bytes texture = 20;
 * @return {!(string|Uint8Array)}
 */
proto.MurmurRPC.User.prototype.getTexture = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes texture = 20;
 * This is a type-conversion wrapper around `getTexture()`
 * @return {string}
 */
proto.MurmurRPC.User.prototype.getTexture_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTexture()));
};


/**
 * optional bytes texture = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTexture()`
 * @return {!Uint8Array}
 */
proto.MurmurRPC.User.prototype.getTexture_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTexture()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.setTexture = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.clearTexture = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.User.prototype.hasTexture = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional bytes address = 21;
 * @return {!(string|Uint8Array)}
 */
proto.MurmurRPC.User.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/**
 * optional bytes address = 21;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.MurmurRPC.User.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 21;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.MurmurRPC.User.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.setAddress = function(value) {
  return jspb.Message.setField(this, 21, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.clearAddress = function() {
  return jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.User.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional bool tcp_only = 22;
 * @return {boolean}
 */
proto.MurmurRPC.User.prototype.getTcpOnly = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 22, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.setTcpOnly = function(value) {
  return jspb.Message.setField(this, 22, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.clearTcpOnly = function() {
  return jspb.Message.setField(this, 22, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.User.prototype.hasTcpOnly = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional float udp_ping_msecs = 23;
 * @return {number}
 */
proto.MurmurRPC.User.prototype.getUdpPingMsecs = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 23, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.setUdpPingMsecs = function(value) {
  return jspb.Message.setField(this, 23, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.clearUdpPingMsecs = function() {
  return jspb.Message.setField(this, 23, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.User.prototype.hasUdpPingMsecs = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional float tcp_ping_msecs = 24;
 * @return {number}
 */
proto.MurmurRPC.User.prototype.getTcpPingMsecs = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 24, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.setTcpPingMsecs = function(value) {
  return jspb.Message.setField(this, 24, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.User} returns this
 */
proto.MurmurRPC.User.prototype.clearTcpPingMsecs = function() {
  return jspb.Message.setField(this, 24, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.User.prototype.hasTcpPingMsecs = function() {
  return jspb.Message.getField(this, 24) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MurmurRPC.Tree.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.Tree.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.Tree.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.Tree} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Tree.toObject = function(includeInstance, msg) {
  var f, obj = {
    server: (f = msg.getServer()) && proto.MurmurRPC.Server.toObject(includeInstance, f),
    channel: (f = msg.getChannel()) && proto.MurmurRPC.Channel.toObject(includeInstance, f),
    childrenList: jspb.Message.toObjectList(msg.getChildrenList(),
    proto.MurmurRPC.Tree.toObject, includeInstance),
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    proto.MurmurRPC.User.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.Tree}
 */
proto.MurmurRPC.Tree.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.Tree;
  return proto.MurmurRPC.Tree.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.Tree} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.Tree}
 */
proto.MurmurRPC.Tree.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MurmurRPC.Server;
      reader.readMessage(value,proto.MurmurRPC.Server.deserializeBinaryFromReader);
      msg.setServer(value);
      break;
    case 2:
      var value = new proto.MurmurRPC.Channel;
      reader.readMessage(value,proto.MurmurRPC.Channel.deserializeBinaryFromReader);
      msg.setChannel(value);
      break;
    case 3:
      var value = new proto.MurmurRPC.Tree;
      reader.readMessage(value,proto.MurmurRPC.Tree.deserializeBinaryFromReader);
      msg.addChildren(value);
      break;
    case 4:
      var value = new proto.MurmurRPC.User;
      reader.readMessage(value,proto.MurmurRPC.User.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.Tree.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.Tree.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.Tree} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Tree.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MurmurRPC.Server.serializeBinaryToWriter
    );
  }
  f = message.getChannel();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.MurmurRPC.Channel.serializeBinaryToWriter
    );
  }
  f = message.getChildrenList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.MurmurRPC.Tree.serializeBinaryToWriter
    );
  }
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.MurmurRPC.User.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.Tree.Query.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.Tree.Query.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.Tree.Query} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Tree.Query.toObject = function(includeInstance, msg) {
  var f, obj = {
    server: (f = msg.getServer()) && proto.MurmurRPC.Server.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.Tree.Query}
 */
proto.MurmurRPC.Tree.Query.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.Tree.Query;
  return proto.MurmurRPC.Tree.Query.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.Tree.Query} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.Tree.Query}
 */
proto.MurmurRPC.Tree.Query.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MurmurRPC.Server;
      reader.readMessage(value,proto.MurmurRPC.Server.deserializeBinaryFromReader);
      msg.setServer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.Tree.Query.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.Tree.Query.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.Tree.Query} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Tree.Query.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MurmurRPC.Server.serializeBinaryToWriter
    );
  }
};


/**
 * optional Server server = 1;
 * @return {?proto.MurmurRPC.Server}
 */
proto.MurmurRPC.Tree.Query.prototype.getServer = function() {
  return /** @type{?proto.MurmurRPC.Server} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Server, 1));
};


/**
 * @param {?proto.MurmurRPC.Server|undefined} value
 * @return {!proto.MurmurRPC.Tree.Query} returns this
*/
proto.MurmurRPC.Tree.Query.prototype.setServer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.Tree.Query} returns this
 */
proto.MurmurRPC.Tree.Query.prototype.clearServer = function() {
  return this.setServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Tree.Query.prototype.hasServer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Server server = 1;
 * @return {?proto.MurmurRPC.Server}
 */
proto.MurmurRPC.Tree.prototype.getServer = function() {
  return /** @type{?proto.MurmurRPC.Server} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Server, 1));
};


/**
 * @param {?proto.MurmurRPC.Server|undefined} value
 * @return {!proto.MurmurRPC.Tree} returns this
*/
proto.MurmurRPC.Tree.prototype.setServer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.Tree} returns this
 */
proto.MurmurRPC.Tree.prototype.clearServer = function() {
  return this.setServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Tree.prototype.hasServer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Channel channel = 2;
 * @return {?proto.MurmurRPC.Channel}
 */
proto.MurmurRPC.Tree.prototype.getChannel = function() {
  return /** @type{?proto.MurmurRPC.Channel} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Channel, 2));
};


/**
 * @param {?proto.MurmurRPC.Channel|undefined} value
 * @return {!proto.MurmurRPC.Tree} returns this
*/
proto.MurmurRPC.Tree.prototype.setChannel = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.Tree} returns this
 */
proto.MurmurRPC.Tree.prototype.clearChannel = function() {
  return this.setChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Tree.prototype.hasChannel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Tree children = 3;
 * @return {!Array<!proto.MurmurRPC.Tree>}
 */
proto.MurmurRPC.Tree.prototype.getChildrenList = function() {
  return /** @type{!Array<!proto.MurmurRPC.Tree>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MurmurRPC.Tree, 3));
};


/**
 * @param {!Array<!proto.MurmurRPC.Tree>} value
 * @return {!proto.MurmurRPC.Tree} returns this
*/
proto.MurmurRPC.Tree.prototype.setChildrenList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.MurmurRPC.Tree=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MurmurRPC.Tree}
 */
proto.MurmurRPC.Tree.prototype.addChildren = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.MurmurRPC.Tree, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MurmurRPC.Tree} returns this
 */
proto.MurmurRPC.Tree.prototype.clearChildrenList = function() {
  return this.setChildrenList([]);
};


/**
 * repeated User users = 4;
 * @return {!Array<!proto.MurmurRPC.User>}
 */
proto.MurmurRPC.Tree.prototype.getUsersList = function() {
  return /** @type{!Array<!proto.MurmurRPC.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MurmurRPC.User, 4));
};


/**
 * @param {!Array<!proto.MurmurRPC.User>} value
 * @return {!proto.MurmurRPC.Tree} returns this
*/
proto.MurmurRPC.Tree.prototype.setUsersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.MurmurRPC.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MurmurRPC.User}
 */
proto.MurmurRPC.Tree.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.MurmurRPC.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MurmurRPC.Tree} returns this
 */
proto.MurmurRPC.Tree.prototype.clearUsersList = function() {
  return this.setUsersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.Ban.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.Ban.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.Ban} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Ban.toObject = function(includeInstance, msg) {
  var f, obj = {
    server: (f = msg.getServer()) && proto.MurmurRPC.Server.toObject(includeInstance, f),
    address: msg.getAddress_asB64(),
    bits: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    name: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    hash: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    reason: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    start: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    durationSecs: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.Ban}
 */
proto.MurmurRPC.Ban.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.Ban;
  return proto.MurmurRPC.Ban.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.Ban} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.Ban}
 */
proto.MurmurRPC.Ban.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MurmurRPC.Server;
      reader.readMessage(value,proto.MurmurRPC.Server.deserializeBinaryFromReader);
      msg.setServer(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBits(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStart(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDurationSecs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.Ban.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.Ban.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.Ban} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Ban.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MurmurRPC.Server.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt64(
      8,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.Ban.Query.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.Ban.Query.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.Ban.Query} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Ban.Query.toObject = function(includeInstance, msg) {
  var f, obj = {
    server: (f = msg.getServer()) && proto.MurmurRPC.Server.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.Ban.Query}
 */
proto.MurmurRPC.Ban.Query.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.Ban.Query;
  return proto.MurmurRPC.Ban.Query.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.Ban.Query} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.Ban.Query}
 */
proto.MurmurRPC.Ban.Query.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MurmurRPC.Server;
      reader.readMessage(value,proto.MurmurRPC.Server.deserializeBinaryFromReader);
      msg.setServer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.Ban.Query.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.Ban.Query.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.Ban.Query} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Ban.Query.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MurmurRPC.Server.serializeBinaryToWriter
    );
  }
};


/**
 * optional Server server = 1;
 * @return {?proto.MurmurRPC.Server}
 */
proto.MurmurRPC.Ban.Query.prototype.getServer = function() {
  return /** @type{?proto.MurmurRPC.Server} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Server, 1));
};


/**
 * @param {?proto.MurmurRPC.Server|undefined} value
 * @return {!proto.MurmurRPC.Ban.Query} returns this
*/
proto.MurmurRPC.Ban.Query.prototype.setServer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.Ban.Query} returns this
 */
proto.MurmurRPC.Ban.Query.prototype.clearServer = function() {
  return this.setServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Ban.Query.prototype.hasServer = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MurmurRPC.Ban.List.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.Ban.List.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.Ban.List.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.Ban.List} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Ban.List.toObject = function(includeInstance, msg) {
  var f, obj = {
    server: (f = msg.getServer()) && proto.MurmurRPC.Server.toObject(includeInstance, f),
    bansList: jspb.Message.toObjectList(msg.getBansList(),
    proto.MurmurRPC.Ban.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.Ban.List}
 */
proto.MurmurRPC.Ban.List.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.Ban.List;
  return proto.MurmurRPC.Ban.List.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.Ban.List} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.Ban.List}
 */
proto.MurmurRPC.Ban.List.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MurmurRPC.Server;
      reader.readMessage(value,proto.MurmurRPC.Server.deserializeBinaryFromReader);
      msg.setServer(value);
      break;
    case 2:
      var value = new proto.MurmurRPC.Ban;
      reader.readMessage(value,proto.MurmurRPC.Ban.deserializeBinaryFromReader);
      msg.addBans(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.Ban.List.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.Ban.List.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.Ban.List} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Ban.List.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MurmurRPC.Server.serializeBinaryToWriter
    );
  }
  f = message.getBansList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.MurmurRPC.Ban.serializeBinaryToWriter
    );
  }
};


/**
 * optional Server server = 1;
 * @return {?proto.MurmurRPC.Server}
 */
proto.MurmurRPC.Ban.List.prototype.getServer = function() {
  return /** @type{?proto.MurmurRPC.Server} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Server, 1));
};


/**
 * @param {?proto.MurmurRPC.Server|undefined} value
 * @return {!proto.MurmurRPC.Ban.List} returns this
*/
proto.MurmurRPC.Ban.List.prototype.setServer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.Ban.List} returns this
 */
proto.MurmurRPC.Ban.List.prototype.clearServer = function() {
  return this.setServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Ban.List.prototype.hasServer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Ban bans = 2;
 * @return {!Array<!proto.MurmurRPC.Ban>}
 */
proto.MurmurRPC.Ban.List.prototype.getBansList = function() {
  return /** @type{!Array<!proto.MurmurRPC.Ban>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MurmurRPC.Ban, 2));
};


/**
 * @param {!Array<!proto.MurmurRPC.Ban>} value
 * @return {!proto.MurmurRPC.Ban.List} returns this
*/
proto.MurmurRPC.Ban.List.prototype.setBansList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.MurmurRPC.Ban=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MurmurRPC.Ban}
 */
proto.MurmurRPC.Ban.List.prototype.addBans = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.MurmurRPC.Ban, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MurmurRPC.Ban.List} returns this
 */
proto.MurmurRPC.Ban.List.prototype.clearBansList = function() {
  return this.setBansList([]);
};


/**
 * optional Server server = 1;
 * @return {?proto.MurmurRPC.Server}
 */
proto.MurmurRPC.Ban.prototype.getServer = function() {
  return /** @type{?proto.MurmurRPC.Server} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Server, 1));
};


/**
 * @param {?proto.MurmurRPC.Server|undefined} value
 * @return {!proto.MurmurRPC.Ban} returns this
*/
proto.MurmurRPC.Ban.prototype.setServer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.Ban} returns this
 */
proto.MurmurRPC.Ban.prototype.clearServer = function() {
  return this.setServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Ban.prototype.hasServer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes address = 2;
 * @return {!(string|Uint8Array)}
 */
proto.MurmurRPC.Ban.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes address = 2;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.MurmurRPC.Ban.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.MurmurRPC.Ban.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.MurmurRPC.Ban} returns this
 */
proto.MurmurRPC.Ban.prototype.setAddress = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Ban} returns this
 */
proto.MurmurRPC.Ban.prototype.clearAddress = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Ban.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 bits = 3;
 * @return {number}
 */
proto.MurmurRPC.Ban.prototype.getBits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.MurmurRPC.Ban} returns this
 */
proto.MurmurRPC.Ban.prototype.setBits = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Ban} returns this
 */
proto.MurmurRPC.Ban.prototype.clearBits = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Ban.prototype.hasBits = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.MurmurRPC.Ban.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.MurmurRPC.Ban} returns this
 */
proto.MurmurRPC.Ban.prototype.setName = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Ban} returns this
 */
proto.MurmurRPC.Ban.prototype.clearName = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Ban.prototype.hasName = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string hash = 5;
 * @return {string}
 */
proto.MurmurRPC.Ban.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.MurmurRPC.Ban} returns this
 */
proto.MurmurRPC.Ban.prototype.setHash = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Ban} returns this
 */
proto.MurmurRPC.Ban.prototype.clearHash = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Ban.prototype.hasHash = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string reason = 6;
 * @return {string}
 */
proto.MurmurRPC.Ban.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.MurmurRPC.Ban} returns this
 */
proto.MurmurRPC.Ban.prototype.setReason = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Ban} returns this
 */
proto.MurmurRPC.Ban.prototype.clearReason = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Ban.prototype.hasReason = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int64 start = 7;
 * @return {number}
 */
proto.MurmurRPC.Ban.prototype.getStart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.MurmurRPC.Ban} returns this
 */
proto.MurmurRPC.Ban.prototype.setStart = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Ban} returns this
 */
proto.MurmurRPC.Ban.prototype.clearStart = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Ban.prototype.hasStart = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int64 duration_secs = 8;
 * @return {number}
 */
proto.MurmurRPC.Ban.prototype.getDurationSecs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.MurmurRPC.Ban} returns this
 */
proto.MurmurRPC.Ban.prototype.setDurationSecs = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Ban} returns this
 */
proto.MurmurRPC.Ban.prototype.clearDurationSecs = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Ban.prototype.hasDurationSecs = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.ACL.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.ACL.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.ACL} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.ACL.toObject = function(includeInstance, msg) {
  var f, obj = {
    applyHere: (f = jspb.Message.getBooleanField(msg, 3)) == null ? undefined : f,
    applySubs: (f = jspb.Message.getBooleanField(msg, 4)) == null ? undefined : f,
    inherited: (f = jspb.Message.getBooleanField(msg, 5)) == null ? undefined : f,
    user: (f = msg.getUser()) && proto.MurmurRPC.DatabaseUser.toObject(includeInstance, f),
    group: (f = msg.getGroup()) && proto.MurmurRPC.ACL.Group.toObject(includeInstance, f),
    allow: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    deny: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.ACL}
 */
proto.MurmurRPC.ACL.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.ACL;
  return proto.MurmurRPC.ACL.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.ACL} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.ACL}
 */
proto.MurmurRPC.ACL.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyHere(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplySubs(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInherited(value);
      break;
    case 6:
      var value = new proto.MurmurRPC.DatabaseUser;
      reader.readMessage(value,proto.MurmurRPC.DatabaseUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 7:
      var value = new proto.MurmurRPC.ACL.Group;
      reader.readMessage(value,proto.MurmurRPC.ACL.Group.deserializeBinaryFromReader);
      msg.setGroup(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAllow(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeny(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.ACL.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.ACL.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.ACL} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.ACL.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.MurmurRPC.DatabaseUser.serializeBinaryToWriter
    );
  }
  f = message.getGroup();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.MurmurRPC.ACL.Group.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint32(
      9,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.MurmurRPC.ACL.Permission = {
  NONE: 0,
  WRITE: 1,
  TRAVERSE: 2,
  ENTER: 4,
  SPEAK: 8,
  WHISPER: 256,
  MUTEDEAFEN: 16,
  MOVE: 32,
  MAKECHANNEL: 64,
  MAKETEMPORARYCHANNEL: 1024,
  LINKCHANNEL: 128,
  TEXTMESSAGE: 512,
  KICK: 65536,
  BAN: 131072,
  REGISTER: 262144,
  REGISTERSELF: 524288
};


/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MurmurRPC.ACL.Group.repeatedFields_ = [5,6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.ACL.Group.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.ACL.Group.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.ACL.Group} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.ACL.Group.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    inherited: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f,
    inherit: (f = jspb.Message.getBooleanField(msg, 3)) == null ? undefined : f,
    inheritable: (f = jspb.Message.getBooleanField(msg, 4)) == null ? undefined : f,
    usersAddList: jspb.Message.toObjectList(msg.getUsersAddList(),
    proto.MurmurRPC.DatabaseUser.toObject, includeInstance),
    usersRemoveList: jspb.Message.toObjectList(msg.getUsersRemoveList(),
    proto.MurmurRPC.DatabaseUser.toObject, includeInstance),
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    proto.MurmurRPC.DatabaseUser.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.ACL.Group}
 */
proto.MurmurRPC.ACL.Group.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.ACL.Group;
  return proto.MurmurRPC.ACL.Group.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.ACL.Group} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.ACL.Group}
 */
proto.MurmurRPC.ACL.Group.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInherited(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInherit(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInheritable(value);
      break;
    case 5:
      var value = new proto.MurmurRPC.DatabaseUser;
      reader.readMessage(value,proto.MurmurRPC.DatabaseUser.deserializeBinaryFromReader);
      msg.addUsersAdd(value);
      break;
    case 6:
      var value = new proto.MurmurRPC.DatabaseUser;
      reader.readMessage(value,proto.MurmurRPC.DatabaseUser.deserializeBinaryFromReader);
      msg.addUsersRemove(value);
      break;
    case 7:
      var value = new proto.MurmurRPC.DatabaseUser;
      reader.readMessage(value,proto.MurmurRPC.DatabaseUser.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.ACL.Group.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.ACL.Group.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.ACL.Group} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.ACL.Group.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getUsersAddList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.MurmurRPC.DatabaseUser.serializeBinaryToWriter
    );
  }
  f = message.getUsersRemoveList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.MurmurRPC.DatabaseUser.serializeBinaryToWriter
    );
  }
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.MurmurRPC.DatabaseUser.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.MurmurRPC.ACL.Group.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.MurmurRPC.ACL.Group} returns this
 */
proto.MurmurRPC.ACL.Group.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.ACL.Group} returns this
 */
proto.MurmurRPC.ACL.Group.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.ACL.Group.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool inherited = 2;
 * @return {boolean}
 */
proto.MurmurRPC.ACL.Group.prototype.getInherited = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MurmurRPC.ACL.Group} returns this
 */
proto.MurmurRPC.ACL.Group.prototype.setInherited = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.ACL.Group} returns this
 */
proto.MurmurRPC.ACL.Group.prototype.clearInherited = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.ACL.Group.prototype.hasInherited = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool inherit = 3;
 * @return {boolean}
 */
proto.MurmurRPC.ACL.Group.prototype.getInherit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MurmurRPC.ACL.Group} returns this
 */
proto.MurmurRPC.ACL.Group.prototype.setInherit = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.ACL.Group} returns this
 */
proto.MurmurRPC.ACL.Group.prototype.clearInherit = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.ACL.Group.prototype.hasInherit = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool inheritable = 4;
 * @return {boolean}
 */
proto.MurmurRPC.ACL.Group.prototype.getInheritable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MurmurRPC.ACL.Group} returns this
 */
proto.MurmurRPC.ACL.Group.prototype.setInheritable = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.ACL.Group} returns this
 */
proto.MurmurRPC.ACL.Group.prototype.clearInheritable = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.ACL.Group.prototype.hasInheritable = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated DatabaseUser users_add = 5;
 * @return {!Array<!proto.MurmurRPC.DatabaseUser>}
 */
proto.MurmurRPC.ACL.Group.prototype.getUsersAddList = function() {
  return /** @type{!Array<!proto.MurmurRPC.DatabaseUser>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MurmurRPC.DatabaseUser, 5));
};


/**
 * @param {!Array<!proto.MurmurRPC.DatabaseUser>} value
 * @return {!proto.MurmurRPC.ACL.Group} returns this
*/
proto.MurmurRPC.ACL.Group.prototype.setUsersAddList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.MurmurRPC.DatabaseUser=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MurmurRPC.DatabaseUser}
 */
proto.MurmurRPC.ACL.Group.prototype.addUsersAdd = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.MurmurRPC.DatabaseUser, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MurmurRPC.ACL.Group} returns this
 */
proto.MurmurRPC.ACL.Group.prototype.clearUsersAddList = function() {
  return this.setUsersAddList([]);
};


/**
 * repeated DatabaseUser users_remove = 6;
 * @return {!Array<!proto.MurmurRPC.DatabaseUser>}
 */
proto.MurmurRPC.ACL.Group.prototype.getUsersRemoveList = function() {
  return /** @type{!Array<!proto.MurmurRPC.DatabaseUser>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MurmurRPC.DatabaseUser, 6));
};


/**
 * @param {!Array<!proto.MurmurRPC.DatabaseUser>} value
 * @return {!proto.MurmurRPC.ACL.Group} returns this
*/
proto.MurmurRPC.ACL.Group.prototype.setUsersRemoveList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.MurmurRPC.DatabaseUser=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MurmurRPC.DatabaseUser}
 */
proto.MurmurRPC.ACL.Group.prototype.addUsersRemove = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.MurmurRPC.DatabaseUser, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MurmurRPC.ACL.Group} returns this
 */
proto.MurmurRPC.ACL.Group.prototype.clearUsersRemoveList = function() {
  return this.setUsersRemoveList([]);
};


/**
 * repeated DatabaseUser users = 7;
 * @return {!Array<!proto.MurmurRPC.DatabaseUser>}
 */
proto.MurmurRPC.ACL.Group.prototype.getUsersList = function() {
  return /** @type{!Array<!proto.MurmurRPC.DatabaseUser>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MurmurRPC.DatabaseUser, 7));
};


/**
 * @param {!Array<!proto.MurmurRPC.DatabaseUser>} value
 * @return {!proto.MurmurRPC.ACL.Group} returns this
*/
proto.MurmurRPC.ACL.Group.prototype.setUsersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.MurmurRPC.DatabaseUser=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MurmurRPC.DatabaseUser}
 */
proto.MurmurRPC.ACL.Group.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.MurmurRPC.DatabaseUser, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MurmurRPC.ACL.Group} returns this
 */
proto.MurmurRPC.ACL.Group.prototype.clearUsersList = function() {
  return this.setUsersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.ACL.Query.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.ACL.Query.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.ACL.Query} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.ACL.Query.toObject = function(includeInstance, msg) {
  var f, obj = {
    server: (f = msg.getServer()) && proto.MurmurRPC.Server.toObject(includeInstance, f),
    user: (f = msg.getUser()) && proto.MurmurRPC.User.toObject(includeInstance, f),
    channel: (f = msg.getChannel()) && proto.MurmurRPC.Channel.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.ACL.Query}
 */
proto.MurmurRPC.ACL.Query.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.ACL.Query;
  return proto.MurmurRPC.ACL.Query.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.ACL.Query} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.ACL.Query}
 */
proto.MurmurRPC.ACL.Query.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MurmurRPC.Server;
      reader.readMessage(value,proto.MurmurRPC.Server.deserializeBinaryFromReader);
      msg.setServer(value);
      break;
    case 2:
      var value = new proto.MurmurRPC.User;
      reader.readMessage(value,proto.MurmurRPC.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 3:
      var value = new proto.MurmurRPC.Channel;
      reader.readMessage(value,proto.MurmurRPC.Channel.deserializeBinaryFromReader);
      msg.setChannel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.ACL.Query.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.ACL.Query.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.ACL.Query} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.ACL.Query.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MurmurRPC.Server.serializeBinaryToWriter
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.MurmurRPC.User.serializeBinaryToWriter
    );
  }
  f = message.getChannel();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.MurmurRPC.Channel.serializeBinaryToWriter
    );
  }
};


/**
 * optional Server server = 1;
 * @return {?proto.MurmurRPC.Server}
 */
proto.MurmurRPC.ACL.Query.prototype.getServer = function() {
  return /** @type{?proto.MurmurRPC.Server} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Server, 1));
};


/**
 * @param {?proto.MurmurRPC.Server|undefined} value
 * @return {!proto.MurmurRPC.ACL.Query} returns this
*/
proto.MurmurRPC.ACL.Query.prototype.setServer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.ACL.Query} returns this
 */
proto.MurmurRPC.ACL.Query.prototype.clearServer = function() {
  return this.setServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.ACL.Query.prototype.hasServer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional User user = 2;
 * @return {?proto.MurmurRPC.User}
 */
proto.MurmurRPC.ACL.Query.prototype.getUser = function() {
  return /** @type{?proto.MurmurRPC.User} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.User, 2));
};


/**
 * @param {?proto.MurmurRPC.User|undefined} value
 * @return {!proto.MurmurRPC.ACL.Query} returns this
*/
proto.MurmurRPC.ACL.Query.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.ACL.Query} returns this
 */
proto.MurmurRPC.ACL.Query.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.ACL.Query.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Channel channel = 3;
 * @return {?proto.MurmurRPC.Channel}
 */
proto.MurmurRPC.ACL.Query.prototype.getChannel = function() {
  return /** @type{?proto.MurmurRPC.Channel} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Channel, 3));
};


/**
 * @param {?proto.MurmurRPC.Channel|undefined} value
 * @return {!proto.MurmurRPC.ACL.Query} returns this
*/
proto.MurmurRPC.ACL.Query.prototype.setChannel = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.ACL.Query} returns this
 */
proto.MurmurRPC.ACL.Query.prototype.clearChannel = function() {
  return this.setChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.ACL.Query.prototype.hasChannel = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MurmurRPC.ACL.List.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.ACL.List.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.ACL.List.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.ACL.List} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.ACL.List.toObject = function(includeInstance, msg) {
  var f, obj = {
    server: (f = msg.getServer()) && proto.MurmurRPC.Server.toObject(includeInstance, f),
    channel: (f = msg.getChannel()) && proto.MurmurRPC.Channel.toObject(includeInstance, f),
    aclsList: jspb.Message.toObjectList(msg.getAclsList(),
    proto.MurmurRPC.ACL.toObject, includeInstance),
    groupsList: jspb.Message.toObjectList(msg.getGroupsList(),
    proto.MurmurRPC.ACL.Group.toObject, includeInstance),
    inherit: (f = jspb.Message.getBooleanField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.ACL.List}
 */
proto.MurmurRPC.ACL.List.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.ACL.List;
  return proto.MurmurRPC.ACL.List.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.ACL.List} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.ACL.List}
 */
proto.MurmurRPC.ACL.List.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MurmurRPC.Server;
      reader.readMessage(value,proto.MurmurRPC.Server.deserializeBinaryFromReader);
      msg.setServer(value);
      break;
    case 2:
      var value = new proto.MurmurRPC.Channel;
      reader.readMessage(value,proto.MurmurRPC.Channel.deserializeBinaryFromReader);
      msg.setChannel(value);
      break;
    case 3:
      var value = new proto.MurmurRPC.ACL;
      reader.readMessage(value,proto.MurmurRPC.ACL.deserializeBinaryFromReader);
      msg.addAcls(value);
      break;
    case 4:
      var value = new proto.MurmurRPC.ACL.Group;
      reader.readMessage(value,proto.MurmurRPC.ACL.Group.deserializeBinaryFromReader);
      msg.addGroups(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInherit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.ACL.List.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.ACL.List.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.ACL.List} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.ACL.List.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MurmurRPC.Server.serializeBinaryToWriter
    );
  }
  f = message.getChannel();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.MurmurRPC.Channel.serializeBinaryToWriter
    );
  }
  f = message.getAclsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.MurmurRPC.ACL.serializeBinaryToWriter
    );
  }
  f = message.getGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.MurmurRPC.ACL.Group.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional Server server = 1;
 * @return {?proto.MurmurRPC.Server}
 */
proto.MurmurRPC.ACL.List.prototype.getServer = function() {
  return /** @type{?proto.MurmurRPC.Server} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Server, 1));
};


/**
 * @param {?proto.MurmurRPC.Server|undefined} value
 * @return {!proto.MurmurRPC.ACL.List} returns this
*/
proto.MurmurRPC.ACL.List.prototype.setServer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.ACL.List} returns this
 */
proto.MurmurRPC.ACL.List.prototype.clearServer = function() {
  return this.setServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.ACL.List.prototype.hasServer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Channel channel = 2;
 * @return {?proto.MurmurRPC.Channel}
 */
proto.MurmurRPC.ACL.List.prototype.getChannel = function() {
  return /** @type{?proto.MurmurRPC.Channel} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Channel, 2));
};


/**
 * @param {?proto.MurmurRPC.Channel|undefined} value
 * @return {!proto.MurmurRPC.ACL.List} returns this
*/
proto.MurmurRPC.ACL.List.prototype.setChannel = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.ACL.List} returns this
 */
proto.MurmurRPC.ACL.List.prototype.clearChannel = function() {
  return this.setChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.ACL.List.prototype.hasChannel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated ACL acls = 3;
 * @return {!Array<!proto.MurmurRPC.ACL>}
 */
proto.MurmurRPC.ACL.List.prototype.getAclsList = function() {
  return /** @type{!Array<!proto.MurmurRPC.ACL>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MurmurRPC.ACL, 3));
};


/**
 * @param {!Array<!proto.MurmurRPC.ACL>} value
 * @return {!proto.MurmurRPC.ACL.List} returns this
*/
proto.MurmurRPC.ACL.List.prototype.setAclsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.MurmurRPC.ACL=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MurmurRPC.ACL}
 */
proto.MurmurRPC.ACL.List.prototype.addAcls = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.MurmurRPC.ACL, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MurmurRPC.ACL.List} returns this
 */
proto.MurmurRPC.ACL.List.prototype.clearAclsList = function() {
  return this.setAclsList([]);
};


/**
 * repeated Group groups = 4;
 * @return {!Array<!proto.MurmurRPC.ACL.Group>}
 */
proto.MurmurRPC.ACL.List.prototype.getGroupsList = function() {
  return /** @type{!Array<!proto.MurmurRPC.ACL.Group>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MurmurRPC.ACL.Group, 4));
};


/**
 * @param {!Array<!proto.MurmurRPC.ACL.Group>} value
 * @return {!proto.MurmurRPC.ACL.List} returns this
*/
proto.MurmurRPC.ACL.List.prototype.setGroupsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.MurmurRPC.ACL.Group=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MurmurRPC.ACL.Group}
 */
proto.MurmurRPC.ACL.List.prototype.addGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.MurmurRPC.ACL.Group, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MurmurRPC.ACL.List} returns this
 */
proto.MurmurRPC.ACL.List.prototype.clearGroupsList = function() {
  return this.setGroupsList([]);
};


/**
 * optional bool inherit = 5;
 * @return {boolean}
 */
proto.MurmurRPC.ACL.List.prototype.getInherit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MurmurRPC.ACL.List} returns this
 */
proto.MurmurRPC.ACL.List.prototype.setInherit = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.ACL.List} returns this
 */
proto.MurmurRPC.ACL.List.prototype.clearInherit = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.ACL.List.prototype.hasInherit = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.ACL.TemporaryGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.ACL.TemporaryGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.ACL.TemporaryGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.ACL.TemporaryGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    server: (f = msg.getServer()) && proto.MurmurRPC.Server.toObject(includeInstance, f),
    channel: (f = msg.getChannel()) && proto.MurmurRPC.Channel.toObject(includeInstance, f),
    user: (f = msg.getUser()) && proto.MurmurRPC.User.toObject(includeInstance, f),
    name: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.ACL.TemporaryGroup}
 */
proto.MurmurRPC.ACL.TemporaryGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.ACL.TemporaryGroup;
  return proto.MurmurRPC.ACL.TemporaryGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.ACL.TemporaryGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.ACL.TemporaryGroup}
 */
proto.MurmurRPC.ACL.TemporaryGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MurmurRPC.Server;
      reader.readMessage(value,proto.MurmurRPC.Server.deserializeBinaryFromReader);
      msg.setServer(value);
      break;
    case 2:
      var value = new proto.MurmurRPC.Channel;
      reader.readMessage(value,proto.MurmurRPC.Channel.deserializeBinaryFromReader);
      msg.setChannel(value);
      break;
    case 3:
      var value = new proto.MurmurRPC.User;
      reader.readMessage(value,proto.MurmurRPC.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.ACL.TemporaryGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.ACL.TemporaryGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.ACL.TemporaryGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.ACL.TemporaryGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MurmurRPC.Server.serializeBinaryToWriter
    );
  }
  f = message.getChannel();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.MurmurRPC.Channel.serializeBinaryToWriter
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.MurmurRPC.User.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional Server server = 1;
 * @return {?proto.MurmurRPC.Server}
 */
proto.MurmurRPC.ACL.TemporaryGroup.prototype.getServer = function() {
  return /** @type{?proto.MurmurRPC.Server} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Server, 1));
};


/**
 * @param {?proto.MurmurRPC.Server|undefined} value
 * @return {!proto.MurmurRPC.ACL.TemporaryGroup} returns this
*/
proto.MurmurRPC.ACL.TemporaryGroup.prototype.setServer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.ACL.TemporaryGroup} returns this
 */
proto.MurmurRPC.ACL.TemporaryGroup.prototype.clearServer = function() {
  return this.setServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.ACL.TemporaryGroup.prototype.hasServer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Channel channel = 2;
 * @return {?proto.MurmurRPC.Channel}
 */
proto.MurmurRPC.ACL.TemporaryGroup.prototype.getChannel = function() {
  return /** @type{?proto.MurmurRPC.Channel} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Channel, 2));
};


/**
 * @param {?proto.MurmurRPC.Channel|undefined} value
 * @return {!proto.MurmurRPC.ACL.TemporaryGroup} returns this
*/
proto.MurmurRPC.ACL.TemporaryGroup.prototype.setChannel = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.ACL.TemporaryGroup} returns this
 */
proto.MurmurRPC.ACL.TemporaryGroup.prototype.clearChannel = function() {
  return this.setChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.ACL.TemporaryGroup.prototype.hasChannel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional User user = 3;
 * @return {?proto.MurmurRPC.User}
 */
proto.MurmurRPC.ACL.TemporaryGroup.prototype.getUser = function() {
  return /** @type{?proto.MurmurRPC.User} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.User, 3));
};


/**
 * @param {?proto.MurmurRPC.User|undefined} value
 * @return {!proto.MurmurRPC.ACL.TemporaryGroup} returns this
*/
proto.MurmurRPC.ACL.TemporaryGroup.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.ACL.TemporaryGroup} returns this
 */
proto.MurmurRPC.ACL.TemporaryGroup.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.ACL.TemporaryGroup.prototype.hasUser = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.MurmurRPC.ACL.TemporaryGroup.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.MurmurRPC.ACL.TemporaryGroup} returns this
 */
proto.MurmurRPC.ACL.TemporaryGroup.prototype.setName = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.ACL.TemporaryGroup} returns this
 */
proto.MurmurRPC.ACL.TemporaryGroup.prototype.clearName = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.ACL.TemporaryGroup.prototype.hasName = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool apply_here = 3;
 * @return {boolean}
 */
proto.MurmurRPC.ACL.prototype.getApplyHere = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MurmurRPC.ACL} returns this
 */
proto.MurmurRPC.ACL.prototype.setApplyHere = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.ACL} returns this
 */
proto.MurmurRPC.ACL.prototype.clearApplyHere = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.ACL.prototype.hasApplyHere = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool apply_subs = 4;
 * @return {boolean}
 */
proto.MurmurRPC.ACL.prototype.getApplySubs = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MurmurRPC.ACL} returns this
 */
proto.MurmurRPC.ACL.prototype.setApplySubs = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.ACL} returns this
 */
proto.MurmurRPC.ACL.prototype.clearApplySubs = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.ACL.prototype.hasApplySubs = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool inherited = 5;
 * @return {boolean}
 */
proto.MurmurRPC.ACL.prototype.getInherited = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MurmurRPC.ACL} returns this
 */
proto.MurmurRPC.ACL.prototype.setInherited = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.ACL} returns this
 */
proto.MurmurRPC.ACL.prototype.clearInherited = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.ACL.prototype.hasInherited = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional DatabaseUser user = 6;
 * @return {?proto.MurmurRPC.DatabaseUser}
 */
proto.MurmurRPC.ACL.prototype.getUser = function() {
  return /** @type{?proto.MurmurRPC.DatabaseUser} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.DatabaseUser, 6));
};


/**
 * @param {?proto.MurmurRPC.DatabaseUser|undefined} value
 * @return {!proto.MurmurRPC.ACL} returns this
*/
proto.MurmurRPC.ACL.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.ACL} returns this
 */
proto.MurmurRPC.ACL.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.ACL.prototype.hasUser = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Group group = 7;
 * @return {?proto.MurmurRPC.ACL.Group}
 */
proto.MurmurRPC.ACL.prototype.getGroup = function() {
  return /** @type{?proto.MurmurRPC.ACL.Group} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.ACL.Group, 7));
};


/**
 * @param {?proto.MurmurRPC.ACL.Group|undefined} value
 * @return {!proto.MurmurRPC.ACL} returns this
*/
proto.MurmurRPC.ACL.prototype.setGroup = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.ACL} returns this
 */
proto.MurmurRPC.ACL.prototype.clearGroup = function() {
  return this.setGroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.ACL.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint32 allow = 8;
 * @return {number}
 */
proto.MurmurRPC.ACL.prototype.getAllow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.MurmurRPC.ACL} returns this
 */
proto.MurmurRPC.ACL.prototype.setAllow = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.ACL} returns this
 */
proto.MurmurRPC.ACL.prototype.clearAllow = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.ACL.prototype.hasAllow = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint32 deny = 9;
 * @return {number}
 */
proto.MurmurRPC.ACL.prototype.getDeny = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.MurmurRPC.ACL} returns this
 */
proto.MurmurRPC.ACL.prototype.setDeny = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.ACL} returns this
 */
proto.MurmurRPC.ACL.prototype.clearDeny = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.ACL.prototype.hasDeny = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.Authenticator.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.Authenticator.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.Authenticator} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Authenticator.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.Authenticator}
 */
proto.MurmurRPC.Authenticator.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.Authenticator;
  return proto.MurmurRPC.Authenticator.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.Authenticator} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.Authenticator}
 */
proto.MurmurRPC.Authenticator.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.Authenticator.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.Authenticator.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.Authenticator} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Authenticator.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.Authenticator.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.Authenticator.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.Authenticator.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Authenticator.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    authenticate: (f = msg.getAuthenticate()) && proto.MurmurRPC.Authenticator.Request.Authenticate.toObject(includeInstance, f),
    find: (f = msg.getFind()) && proto.MurmurRPC.Authenticator.Request.Find.toObject(includeInstance, f),
    query: (f = msg.getQuery()) && proto.MurmurRPC.Authenticator.Request.Query.toObject(includeInstance, f),
    register: (f = msg.getRegister()) && proto.MurmurRPC.Authenticator.Request.Register.toObject(includeInstance, f),
    deregister: (f = msg.getDeregister()) && proto.MurmurRPC.Authenticator.Request.Deregister.toObject(includeInstance, f),
    update: (f = msg.getUpdate()) && proto.MurmurRPC.Authenticator.Request.Update.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.Authenticator.Request}
 */
proto.MurmurRPC.Authenticator.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.Authenticator.Request;
  return proto.MurmurRPC.Authenticator.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.Authenticator.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.Authenticator.Request}
 */
proto.MurmurRPC.Authenticator.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MurmurRPC.Authenticator.Request.Authenticate;
      reader.readMessage(value,proto.MurmurRPC.Authenticator.Request.Authenticate.deserializeBinaryFromReader);
      msg.setAuthenticate(value);
      break;
    case 2:
      var value = new proto.MurmurRPC.Authenticator.Request.Find;
      reader.readMessage(value,proto.MurmurRPC.Authenticator.Request.Find.deserializeBinaryFromReader);
      msg.setFind(value);
      break;
    case 3:
      var value = new proto.MurmurRPC.Authenticator.Request.Query;
      reader.readMessage(value,proto.MurmurRPC.Authenticator.Request.Query.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    case 4:
      var value = new proto.MurmurRPC.Authenticator.Request.Register;
      reader.readMessage(value,proto.MurmurRPC.Authenticator.Request.Register.deserializeBinaryFromReader);
      msg.setRegister(value);
      break;
    case 5:
      var value = new proto.MurmurRPC.Authenticator.Request.Deregister;
      reader.readMessage(value,proto.MurmurRPC.Authenticator.Request.Deregister.deserializeBinaryFromReader);
      msg.setDeregister(value);
      break;
    case 6:
      var value = new proto.MurmurRPC.Authenticator.Request.Update;
      reader.readMessage(value,proto.MurmurRPC.Authenticator.Request.Update.deserializeBinaryFromReader);
      msg.setUpdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.Authenticator.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.Authenticator.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.Authenticator.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Authenticator.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthenticate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MurmurRPC.Authenticator.Request.Authenticate.serializeBinaryToWriter
    );
  }
  f = message.getFind();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.MurmurRPC.Authenticator.Request.Find.serializeBinaryToWriter
    );
  }
  f = message.getQuery();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.MurmurRPC.Authenticator.Request.Query.serializeBinaryToWriter
    );
  }
  f = message.getRegister();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.MurmurRPC.Authenticator.Request.Register.serializeBinaryToWriter
    );
  }
  f = message.getDeregister();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.MurmurRPC.Authenticator.Request.Deregister.serializeBinaryToWriter
    );
  }
  f = message.getUpdate();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.MurmurRPC.Authenticator.Request.Update.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MurmurRPC.Authenticator.Request.Authenticate.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.Authenticator.Request.Authenticate.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.Authenticator.Request.Authenticate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.Authenticator.Request.Authenticate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Authenticator.Request.Authenticate.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    password: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    certificatesList: msg.getCertificatesList_asB64(),
    certificateHash: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    strongCertificate: (f = jspb.Message.getBooleanField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.Authenticator.Request.Authenticate}
 */
proto.MurmurRPC.Authenticator.Request.Authenticate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.Authenticator.Request.Authenticate;
  return proto.MurmurRPC.Authenticator.Request.Authenticate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.Authenticator.Request.Authenticate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.Authenticator.Request.Authenticate}
 */
proto.MurmurRPC.Authenticator.Request.Authenticate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addCertificates(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCertificateHash(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStrongCertificate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.Authenticator.Request.Authenticate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.Authenticator.Request.Authenticate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.Authenticator.Request.Authenticate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Authenticator.Request.Authenticate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCertificatesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.MurmurRPC.Authenticator.Request.Authenticate.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.MurmurRPC.Authenticator.Request.Authenticate} returns this
 */
proto.MurmurRPC.Authenticator.Request.Authenticate.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Authenticator.Request.Authenticate} returns this
 */
proto.MurmurRPC.Authenticator.Request.Authenticate.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Authenticator.Request.Authenticate.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.MurmurRPC.Authenticator.Request.Authenticate.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.MurmurRPC.Authenticator.Request.Authenticate} returns this
 */
proto.MurmurRPC.Authenticator.Request.Authenticate.prototype.setPassword = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Authenticator.Request.Authenticate} returns this
 */
proto.MurmurRPC.Authenticator.Request.Authenticate.prototype.clearPassword = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Authenticator.Request.Authenticate.prototype.hasPassword = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated bytes certificates = 3;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.MurmurRPC.Authenticator.Request.Authenticate.prototype.getCertificatesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * repeated bytes certificates = 3;
 * This is a type-conversion wrapper around `getCertificatesList()`
 * @return {!Array<string>}
 */
proto.MurmurRPC.Authenticator.Request.Authenticate.prototype.getCertificatesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getCertificatesList()));
};


/**
 * repeated bytes certificates = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCertificatesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.MurmurRPC.Authenticator.Request.Authenticate.prototype.getCertificatesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getCertificatesList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.MurmurRPC.Authenticator.Request.Authenticate} returns this
 */
proto.MurmurRPC.Authenticator.Request.Authenticate.prototype.setCertificatesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.MurmurRPC.Authenticator.Request.Authenticate} returns this
 */
proto.MurmurRPC.Authenticator.Request.Authenticate.prototype.addCertificates = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MurmurRPC.Authenticator.Request.Authenticate} returns this
 */
proto.MurmurRPC.Authenticator.Request.Authenticate.prototype.clearCertificatesList = function() {
  return this.setCertificatesList([]);
};


/**
 * optional string certificate_hash = 4;
 * @return {string}
 */
proto.MurmurRPC.Authenticator.Request.Authenticate.prototype.getCertificateHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.MurmurRPC.Authenticator.Request.Authenticate} returns this
 */
proto.MurmurRPC.Authenticator.Request.Authenticate.prototype.setCertificateHash = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Authenticator.Request.Authenticate} returns this
 */
proto.MurmurRPC.Authenticator.Request.Authenticate.prototype.clearCertificateHash = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Authenticator.Request.Authenticate.prototype.hasCertificateHash = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool strong_certificate = 5;
 * @return {boolean}
 */
proto.MurmurRPC.Authenticator.Request.Authenticate.prototype.getStrongCertificate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MurmurRPC.Authenticator.Request.Authenticate} returns this
 */
proto.MurmurRPC.Authenticator.Request.Authenticate.prototype.setStrongCertificate = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Authenticator.Request.Authenticate} returns this
 */
proto.MurmurRPC.Authenticator.Request.Authenticate.prototype.clearStrongCertificate = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Authenticator.Request.Authenticate.prototype.hasStrongCertificate = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.Authenticator.Request.Find.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.Authenticator.Request.Find.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.Authenticator.Request.Find} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Authenticator.Request.Find.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    name: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.Authenticator.Request.Find}
 */
proto.MurmurRPC.Authenticator.Request.Find.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.Authenticator.Request.Find;
  return proto.MurmurRPC.Authenticator.Request.Find.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.Authenticator.Request.Find} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.Authenticator.Request.Find}
 */
proto.MurmurRPC.Authenticator.Request.Find.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.Authenticator.Request.Find.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.Authenticator.Request.Find.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.Authenticator.Request.Find} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Authenticator.Request.Find.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.MurmurRPC.Authenticator.Request.Find.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.MurmurRPC.Authenticator.Request.Find} returns this
 */
proto.MurmurRPC.Authenticator.Request.Find.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Authenticator.Request.Find} returns this
 */
proto.MurmurRPC.Authenticator.Request.Find.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Authenticator.Request.Find.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.MurmurRPC.Authenticator.Request.Find.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.MurmurRPC.Authenticator.Request.Find} returns this
 */
proto.MurmurRPC.Authenticator.Request.Find.prototype.setName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Authenticator.Request.Find} returns this
 */
proto.MurmurRPC.Authenticator.Request.Find.prototype.clearName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Authenticator.Request.Find.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.Authenticator.Request.Query.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.Authenticator.Request.Query.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.Authenticator.Request.Query} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Authenticator.Request.Query.toObject = function(includeInstance, msg) {
  var f, obj = {
    filter: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.Authenticator.Request.Query}
 */
proto.MurmurRPC.Authenticator.Request.Query.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.Authenticator.Request.Query;
  return proto.MurmurRPC.Authenticator.Request.Query.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.Authenticator.Request.Query} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.Authenticator.Request.Query}
 */
proto.MurmurRPC.Authenticator.Request.Query.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.Authenticator.Request.Query.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.Authenticator.Request.Query.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.Authenticator.Request.Query} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Authenticator.Request.Query.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string filter = 1;
 * @return {string}
 */
proto.MurmurRPC.Authenticator.Request.Query.prototype.getFilter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.MurmurRPC.Authenticator.Request.Query} returns this
 */
proto.MurmurRPC.Authenticator.Request.Query.prototype.setFilter = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Authenticator.Request.Query} returns this
 */
proto.MurmurRPC.Authenticator.Request.Query.prototype.clearFilter = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Authenticator.Request.Query.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.Authenticator.Request.Register.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.Authenticator.Request.Register.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.Authenticator.Request.Register} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Authenticator.Request.Register.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.MurmurRPC.DatabaseUser.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.Authenticator.Request.Register}
 */
proto.MurmurRPC.Authenticator.Request.Register.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.Authenticator.Request.Register;
  return proto.MurmurRPC.Authenticator.Request.Register.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.Authenticator.Request.Register} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.Authenticator.Request.Register}
 */
proto.MurmurRPC.Authenticator.Request.Register.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MurmurRPC.DatabaseUser;
      reader.readMessage(value,proto.MurmurRPC.DatabaseUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.Authenticator.Request.Register.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.Authenticator.Request.Register.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.Authenticator.Request.Register} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Authenticator.Request.Register.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MurmurRPC.DatabaseUser.serializeBinaryToWriter
    );
  }
};


/**
 * optional DatabaseUser user = 1;
 * @return {?proto.MurmurRPC.DatabaseUser}
 */
proto.MurmurRPC.Authenticator.Request.Register.prototype.getUser = function() {
  return /** @type{?proto.MurmurRPC.DatabaseUser} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.DatabaseUser, 1));
};


/**
 * @param {?proto.MurmurRPC.DatabaseUser|undefined} value
 * @return {!proto.MurmurRPC.Authenticator.Request.Register} returns this
*/
proto.MurmurRPC.Authenticator.Request.Register.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.Authenticator.Request.Register} returns this
 */
proto.MurmurRPC.Authenticator.Request.Register.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Authenticator.Request.Register.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.Authenticator.Request.Deregister.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.Authenticator.Request.Deregister.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.Authenticator.Request.Deregister} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Authenticator.Request.Deregister.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.MurmurRPC.DatabaseUser.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.Authenticator.Request.Deregister}
 */
proto.MurmurRPC.Authenticator.Request.Deregister.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.Authenticator.Request.Deregister;
  return proto.MurmurRPC.Authenticator.Request.Deregister.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.Authenticator.Request.Deregister} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.Authenticator.Request.Deregister}
 */
proto.MurmurRPC.Authenticator.Request.Deregister.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MurmurRPC.DatabaseUser;
      reader.readMessage(value,proto.MurmurRPC.DatabaseUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.Authenticator.Request.Deregister.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.Authenticator.Request.Deregister.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.Authenticator.Request.Deregister} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Authenticator.Request.Deregister.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MurmurRPC.DatabaseUser.serializeBinaryToWriter
    );
  }
};


/**
 * optional DatabaseUser user = 1;
 * @return {?proto.MurmurRPC.DatabaseUser}
 */
proto.MurmurRPC.Authenticator.Request.Deregister.prototype.getUser = function() {
  return /** @type{?proto.MurmurRPC.DatabaseUser} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.DatabaseUser, 1));
};


/**
 * @param {?proto.MurmurRPC.DatabaseUser|undefined} value
 * @return {!proto.MurmurRPC.Authenticator.Request.Deregister} returns this
*/
proto.MurmurRPC.Authenticator.Request.Deregister.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.Authenticator.Request.Deregister} returns this
 */
proto.MurmurRPC.Authenticator.Request.Deregister.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Authenticator.Request.Deregister.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.Authenticator.Request.Update.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.Authenticator.Request.Update.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.Authenticator.Request.Update} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Authenticator.Request.Update.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.MurmurRPC.DatabaseUser.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.Authenticator.Request.Update}
 */
proto.MurmurRPC.Authenticator.Request.Update.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.Authenticator.Request.Update;
  return proto.MurmurRPC.Authenticator.Request.Update.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.Authenticator.Request.Update} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.Authenticator.Request.Update}
 */
proto.MurmurRPC.Authenticator.Request.Update.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MurmurRPC.DatabaseUser;
      reader.readMessage(value,proto.MurmurRPC.DatabaseUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.Authenticator.Request.Update.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.Authenticator.Request.Update.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.Authenticator.Request.Update} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Authenticator.Request.Update.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MurmurRPC.DatabaseUser.serializeBinaryToWriter
    );
  }
};


/**
 * optional DatabaseUser user = 1;
 * @return {?proto.MurmurRPC.DatabaseUser}
 */
proto.MurmurRPC.Authenticator.Request.Update.prototype.getUser = function() {
  return /** @type{?proto.MurmurRPC.DatabaseUser} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.DatabaseUser, 1));
};


/**
 * @param {?proto.MurmurRPC.DatabaseUser|undefined} value
 * @return {!proto.MurmurRPC.Authenticator.Request.Update} returns this
*/
proto.MurmurRPC.Authenticator.Request.Update.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.Authenticator.Request.Update} returns this
 */
proto.MurmurRPC.Authenticator.Request.Update.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Authenticator.Request.Update.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Authenticate authenticate = 1;
 * @return {?proto.MurmurRPC.Authenticator.Request.Authenticate}
 */
proto.MurmurRPC.Authenticator.Request.prototype.getAuthenticate = function() {
  return /** @type{?proto.MurmurRPC.Authenticator.Request.Authenticate} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Authenticator.Request.Authenticate, 1));
};


/**
 * @param {?proto.MurmurRPC.Authenticator.Request.Authenticate|undefined} value
 * @return {!proto.MurmurRPC.Authenticator.Request} returns this
*/
proto.MurmurRPC.Authenticator.Request.prototype.setAuthenticate = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.Authenticator.Request} returns this
 */
proto.MurmurRPC.Authenticator.Request.prototype.clearAuthenticate = function() {
  return this.setAuthenticate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Authenticator.Request.prototype.hasAuthenticate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Find find = 2;
 * @return {?proto.MurmurRPC.Authenticator.Request.Find}
 */
proto.MurmurRPC.Authenticator.Request.prototype.getFind = function() {
  return /** @type{?proto.MurmurRPC.Authenticator.Request.Find} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Authenticator.Request.Find, 2));
};


/**
 * @param {?proto.MurmurRPC.Authenticator.Request.Find|undefined} value
 * @return {!proto.MurmurRPC.Authenticator.Request} returns this
*/
proto.MurmurRPC.Authenticator.Request.prototype.setFind = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.Authenticator.Request} returns this
 */
proto.MurmurRPC.Authenticator.Request.prototype.clearFind = function() {
  return this.setFind(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Authenticator.Request.prototype.hasFind = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Query query = 3;
 * @return {?proto.MurmurRPC.Authenticator.Request.Query}
 */
proto.MurmurRPC.Authenticator.Request.prototype.getQuery = function() {
  return /** @type{?proto.MurmurRPC.Authenticator.Request.Query} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Authenticator.Request.Query, 3));
};


/**
 * @param {?proto.MurmurRPC.Authenticator.Request.Query|undefined} value
 * @return {!proto.MurmurRPC.Authenticator.Request} returns this
*/
proto.MurmurRPC.Authenticator.Request.prototype.setQuery = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.Authenticator.Request} returns this
 */
proto.MurmurRPC.Authenticator.Request.prototype.clearQuery = function() {
  return this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Authenticator.Request.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Register register = 4;
 * @return {?proto.MurmurRPC.Authenticator.Request.Register}
 */
proto.MurmurRPC.Authenticator.Request.prototype.getRegister = function() {
  return /** @type{?proto.MurmurRPC.Authenticator.Request.Register} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Authenticator.Request.Register, 4));
};


/**
 * @param {?proto.MurmurRPC.Authenticator.Request.Register|undefined} value
 * @return {!proto.MurmurRPC.Authenticator.Request} returns this
*/
proto.MurmurRPC.Authenticator.Request.prototype.setRegister = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.Authenticator.Request} returns this
 */
proto.MurmurRPC.Authenticator.Request.prototype.clearRegister = function() {
  return this.setRegister(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Authenticator.Request.prototype.hasRegister = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Deregister deregister = 5;
 * @return {?proto.MurmurRPC.Authenticator.Request.Deregister}
 */
proto.MurmurRPC.Authenticator.Request.prototype.getDeregister = function() {
  return /** @type{?proto.MurmurRPC.Authenticator.Request.Deregister} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Authenticator.Request.Deregister, 5));
};


/**
 * @param {?proto.MurmurRPC.Authenticator.Request.Deregister|undefined} value
 * @return {!proto.MurmurRPC.Authenticator.Request} returns this
*/
proto.MurmurRPC.Authenticator.Request.prototype.setDeregister = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.Authenticator.Request} returns this
 */
proto.MurmurRPC.Authenticator.Request.prototype.clearDeregister = function() {
  return this.setDeregister(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Authenticator.Request.prototype.hasDeregister = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Update update = 6;
 * @return {?proto.MurmurRPC.Authenticator.Request.Update}
 */
proto.MurmurRPC.Authenticator.Request.prototype.getUpdate = function() {
  return /** @type{?proto.MurmurRPC.Authenticator.Request.Update} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Authenticator.Request.Update, 6));
};


/**
 * @param {?proto.MurmurRPC.Authenticator.Request.Update|undefined} value
 * @return {!proto.MurmurRPC.Authenticator.Request} returns this
*/
proto.MurmurRPC.Authenticator.Request.prototype.setUpdate = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.Authenticator.Request} returns this
 */
proto.MurmurRPC.Authenticator.Request.prototype.clearUpdate = function() {
  return this.setUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Authenticator.Request.prototype.hasUpdate = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.Authenticator.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.Authenticator.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.Authenticator.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Authenticator.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    initialize: (f = msg.getInitialize()) && proto.MurmurRPC.Authenticator.Response.Initialize.toObject(includeInstance, f),
    authenticate: (f = msg.getAuthenticate()) && proto.MurmurRPC.Authenticator.Response.Authenticate.toObject(includeInstance, f),
    find: (f = msg.getFind()) && proto.MurmurRPC.Authenticator.Response.Find.toObject(includeInstance, f),
    query: (f = msg.getQuery()) && proto.MurmurRPC.Authenticator.Response.Query.toObject(includeInstance, f),
    register: (f = msg.getRegister()) && proto.MurmurRPC.Authenticator.Response.Register.toObject(includeInstance, f),
    deregister: (f = msg.getDeregister()) && proto.MurmurRPC.Authenticator.Response.Deregister.toObject(includeInstance, f),
    update: (f = msg.getUpdate()) && proto.MurmurRPC.Authenticator.Response.Update.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.Authenticator.Response}
 */
proto.MurmurRPC.Authenticator.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.Authenticator.Response;
  return proto.MurmurRPC.Authenticator.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.Authenticator.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.Authenticator.Response}
 */
proto.MurmurRPC.Authenticator.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MurmurRPC.Authenticator.Response.Initialize;
      reader.readMessage(value,proto.MurmurRPC.Authenticator.Response.Initialize.deserializeBinaryFromReader);
      msg.setInitialize(value);
      break;
    case 2:
      var value = new proto.MurmurRPC.Authenticator.Response.Authenticate;
      reader.readMessage(value,proto.MurmurRPC.Authenticator.Response.Authenticate.deserializeBinaryFromReader);
      msg.setAuthenticate(value);
      break;
    case 3:
      var value = new proto.MurmurRPC.Authenticator.Response.Find;
      reader.readMessage(value,proto.MurmurRPC.Authenticator.Response.Find.deserializeBinaryFromReader);
      msg.setFind(value);
      break;
    case 4:
      var value = new proto.MurmurRPC.Authenticator.Response.Query;
      reader.readMessage(value,proto.MurmurRPC.Authenticator.Response.Query.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    case 5:
      var value = new proto.MurmurRPC.Authenticator.Response.Register;
      reader.readMessage(value,proto.MurmurRPC.Authenticator.Response.Register.deserializeBinaryFromReader);
      msg.setRegister(value);
      break;
    case 6:
      var value = new proto.MurmurRPC.Authenticator.Response.Deregister;
      reader.readMessage(value,proto.MurmurRPC.Authenticator.Response.Deregister.deserializeBinaryFromReader);
      msg.setDeregister(value);
      break;
    case 7:
      var value = new proto.MurmurRPC.Authenticator.Response.Update;
      reader.readMessage(value,proto.MurmurRPC.Authenticator.Response.Update.deserializeBinaryFromReader);
      msg.setUpdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.Authenticator.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.Authenticator.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.Authenticator.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Authenticator.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInitialize();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MurmurRPC.Authenticator.Response.Initialize.serializeBinaryToWriter
    );
  }
  f = message.getAuthenticate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.MurmurRPC.Authenticator.Response.Authenticate.serializeBinaryToWriter
    );
  }
  f = message.getFind();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.MurmurRPC.Authenticator.Response.Find.serializeBinaryToWriter
    );
  }
  f = message.getQuery();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.MurmurRPC.Authenticator.Response.Query.serializeBinaryToWriter
    );
  }
  f = message.getRegister();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.MurmurRPC.Authenticator.Response.Register.serializeBinaryToWriter
    );
  }
  f = message.getDeregister();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.MurmurRPC.Authenticator.Response.Deregister.serializeBinaryToWriter
    );
  }
  f = message.getUpdate();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.MurmurRPC.Authenticator.Response.Update.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.MurmurRPC.Authenticator.Response.Status = {
  FALLTHROUGH: 0,
  SUCCESS: 1,
  FAILURE: 2,
  TEMPORARYFAILURE: 3
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.Authenticator.Response.Initialize.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.Authenticator.Response.Initialize.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.Authenticator.Response.Initialize} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Authenticator.Response.Initialize.toObject = function(includeInstance, msg) {
  var f, obj = {
    server: (f = msg.getServer()) && proto.MurmurRPC.Server.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.Authenticator.Response.Initialize}
 */
proto.MurmurRPC.Authenticator.Response.Initialize.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.Authenticator.Response.Initialize;
  return proto.MurmurRPC.Authenticator.Response.Initialize.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.Authenticator.Response.Initialize} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.Authenticator.Response.Initialize}
 */
proto.MurmurRPC.Authenticator.Response.Initialize.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MurmurRPC.Server;
      reader.readMessage(value,proto.MurmurRPC.Server.deserializeBinaryFromReader);
      msg.setServer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.Authenticator.Response.Initialize.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.Authenticator.Response.Initialize.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.Authenticator.Response.Initialize} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Authenticator.Response.Initialize.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MurmurRPC.Server.serializeBinaryToWriter
    );
  }
};


/**
 * optional Server server = 1;
 * @return {?proto.MurmurRPC.Server}
 */
proto.MurmurRPC.Authenticator.Response.Initialize.prototype.getServer = function() {
  return /** @type{?proto.MurmurRPC.Server} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Server, 1));
};


/**
 * @param {?proto.MurmurRPC.Server|undefined} value
 * @return {!proto.MurmurRPC.Authenticator.Response.Initialize} returns this
*/
proto.MurmurRPC.Authenticator.Response.Initialize.prototype.setServer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.Authenticator.Response.Initialize} returns this
 */
proto.MurmurRPC.Authenticator.Response.Initialize.prototype.clearServer = function() {
  return this.setServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Authenticator.Response.Initialize.prototype.hasServer = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MurmurRPC.Authenticator.Response.Authenticate.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.Authenticator.Response.Authenticate.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.Authenticator.Response.Authenticate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.Authenticator.Response.Authenticate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Authenticator.Response.Authenticate.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    id: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    name: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    groupsList: jspb.Message.toObjectList(msg.getGroupsList(),
    proto.MurmurRPC.ACL.Group.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.Authenticator.Response.Authenticate}
 */
proto.MurmurRPC.Authenticator.Response.Authenticate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.Authenticator.Response.Authenticate;
  return proto.MurmurRPC.Authenticator.Response.Authenticate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.Authenticator.Response.Authenticate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.Authenticator.Response.Authenticate}
 */
proto.MurmurRPC.Authenticator.Response.Authenticate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.MurmurRPC.Authenticator.Response.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = new proto.MurmurRPC.ACL.Group;
      reader.readMessage(value,proto.MurmurRPC.ACL.Group.deserializeBinaryFromReader);
      msg.addGroups(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.Authenticator.Response.Authenticate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.Authenticator.Response.Authenticate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.Authenticator.Response.Authenticate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Authenticator.Response.Authenticate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.MurmurRPC.Authenticator.Response.Status} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.MurmurRPC.ACL.Group.serializeBinaryToWriter
    );
  }
};


/**
 * optional Status status = 1;
 * @return {!proto.MurmurRPC.Authenticator.Response.Status}
 */
proto.MurmurRPC.Authenticator.Response.Authenticate.prototype.getStatus = function() {
  return /** @type {!proto.MurmurRPC.Authenticator.Response.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.MurmurRPC.Authenticator.Response.Status} value
 * @return {!proto.MurmurRPC.Authenticator.Response.Authenticate} returns this
 */
proto.MurmurRPC.Authenticator.Response.Authenticate.prototype.setStatus = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Authenticator.Response.Authenticate} returns this
 */
proto.MurmurRPC.Authenticator.Response.Authenticate.prototype.clearStatus = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Authenticator.Response.Authenticate.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 id = 2;
 * @return {number}
 */
proto.MurmurRPC.Authenticator.Response.Authenticate.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.MurmurRPC.Authenticator.Response.Authenticate} returns this
 */
proto.MurmurRPC.Authenticator.Response.Authenticate.prototype.setId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Authenticator.Response.Authenticate} returns this
 */
proto.MurmurRPC.Authenticator.Response.Authenticate.prototype.clearId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Authenticator.Response.Authenticate.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.MurmurRPC.Authenticator.Response.Authenticate.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.MurmurRPC.Authenticator.Response.Authenticate} returns this
 */
proto.MurmurRPC.Authenticator.Response.Authenticate.prototype.setName = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Authenticator.Response.Authenticate} returns this
 */
proto.MurmurRPC.Authenticator.Response.Authenticate.prototype.clearName = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Authenticator.Response.Authenticate.prototype.hasName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated ACL.Group groups = 4;
 * @return {!Array<!proto.MurmurRPC.ACL.Group>}
 */
proto.MurmurRPC.Authenticator.Response.Authenticate.prototype.getGroupsList = function() {
  return /** @type{!Array<!proto.MurmurRPC.ACL.Group>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MurmurRPC.ACL.Group, 4));
};


/**
 * @param {!Array<!proto.MurmurRPC.ACL.Group>} value
 * @return {!proto.MurmurRPC.Authenticator.Response.Authenticate} returns this
*/
proto.MurmurRPC.Authenticator.Response.Authenticate.prototype.setGroupsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.MurmurRPC.ACL.Group=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MurmurRPC.ACL.Group}
 */
proto.MurmurRPC.Authenticator.Response.Authenticate.prototype.addGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.MurmurRPC.ACL.Group, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MurmurRPC.Authenticator.Response.Authenticate} returns this
 */
proto.MurmurRPC.Authenticator.Response.Authenticate.prototype.clearGroupsList = function() {
  return this.setGroupsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.Authenticator.Response.Find.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.Authenticator.Response.Find.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.Authenticator.Response.Find} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Authenticator.Response.Find.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.MurmurRPC.DatabaseUser.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.Authenticator.Response.Find}
 */
proto.MurmurRPC.Authenticator.Response.Find.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.Authenticator.Response.Find;
  return proto.MurmurRPC.Authenticator.Response.Find.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.Authenticator.Response.Find} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.Authenticator.Response.Find}
 */
proto.MurmurRPC.Authenticator.Response.Find.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MurmurRPC.DatabaseUser;
      reader.readMessage(value,proto.MurmurRPC.DatabaseUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.Authenticator.Response.Find.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.Authenticator.Response.Find.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.Authenticator.Response.Find} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Authenticator.Response.Find.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MurmurRPC.DatabaseUser.serializeBinaryToWriter
    );
  }
};


/**
 * optional DatabaseUser user = 1;
 * @return {?proto.MurmurRPC.DatabaseUser}
 */
proto.MurmurRPC.Authenticator.Response.Find.prototype.getUser = function() {
  return /** @type{?proto.MurmurRPC.DatabaseUser} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.DatabaseUser, 1));
};


/**
 * @param {?proto.MurmurRPC.DatabaseUser|undefined} value
 * @return {!proto.MurmurRPC.Authenticator.Response.Find} returns this
*/
proto.MurmurRPC.Authenticator.Response.Find.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.Authenticator.Response.Find} returns this
 */
proto.MurmurRPC.Authenticator.Response.Find.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Authenticator.Response.Find.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MurmurRPC.Authenticator.Response.Query.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.Authenticator.Response.Query.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.Authenticator.Response.Query.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.Authenticator.Response.Query} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Authenticator.Response.Query.toObject = function(includeInstance, msg) {
  var f, obj = {
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    proto.MurmurRPC.DatabaseUser.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.Authenticator.Response.Query}
 */
proto.MurmurRPC.Authenticator.Response.Query.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.Authenticator.Response.Query;
  return proto.MurmurRPC.Authenticator.Response.Query.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.Authenticator.Response.Query} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.Authenticator.Response.Query}
 */
proto.MurmurRPC.Authenticator.Response.Query.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MurmurRPC.DatabaseUser;
      reader.readMessage(value,proto.MurmurRPC.DatabaseUser.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.Authenticator.Response.Query.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.Authenticator.Response.Query.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.Authenticator.Response.Query} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Authenticator.Response.Query.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.MurmurRPC.DatabaseUser.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DatabaseUser users = 1;
 * @return {!Array<!proto.MurmurRPC.DatabaseUser>}
 */
proto.MurmurRPC.Authenticator.Response.Query.prototype.getUsersList = function() {
  return /** @type{!Array<!proto.MurmurRPC.DatabaseUser>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MurmurRPC.DatabaseUser, 1));
};


/**
 * @param {!Array<!proto.MurmurRPC.DatabaseUser>} value
 * @return {!proto.MurmurRPC.Authenticator.Response.Query} returns this
*/
proto.MurmurRPC.Authenticator.Response.Query.prototype.setUsersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.MurmurRPC.DatabaseUser=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MurmurRPC.DatabaseUser}
 */
proto.MurmurRPC.Authenticator.Response.Query.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.MurmurRPC.DatabaseUser, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MurmurRPC.Authenticator.Response.Query} returns this
 */
proto.MurmurRPC.Authenticator.Response.Query.prototype.clearUsersList = function() {
  return this.setUsersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.Authenticator.Response.Register.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.Authenticator.Response.Register.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.Authenticator.Response.Register} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Authenticator.Response.Register.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    user: (f = msg.getUser()) && proto.MurmurRPC.DatabaseUser.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.Authenticator.Response.Register}
 */
proto.MurmurRPC.Authenticator.Response.Register.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.Authenticator.Response.Register;
  return proto.MurmurRPC.Authenticator.Response.Register.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.Authenticator.Response.Register} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.Authenticator.Response.Register}
 */
proto.MurmurRPC.Authenticator.Response.Register.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.MurmurRPC.Authenticator.Response.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = new proto.MurmurRPC.DatabaseUser;
      reader.readMessage(value,proto.MurmurRPC.DatabaseUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.Authenticator.Response.Register.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.Authenticator.Response.Register.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.Authenticator.Response.Register} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Authenticator.Response.Register.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.MurmurRPC.Authenticator.Response.Status} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.MurmurRPC.DatabaseUser.serializeBinaryToWriter
    );
  }
};


/**
 * optional Status status = 1;
 * @return {!proto.MurmurRPC.Authenticator.Response.Status}
 */
proto.MurmurRPC.Authenticator.Response.Register.prototype.getStatus = function() {
  return /** @type {!proto.MurmurRPC.Authenticator.Response.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.MurmurRPC.Authenticator.Response.Status} value
 * @return {!proto.MurmurRPC.Authenticator.Response.Register} returns this
 */
proto.MurmurRPC.Authenticator.Response.Register.prototype.setStatus = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Authenticator.Response.Register} returns this
 */
proto.MurmurRPC.Authenticator.Response.Register.prototype.clearStatus = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Authenticator.Response.Register.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DatabaseUser user = 2;
 * @return {?proto.MurmurRPC.DatabaseUser}
 */
proto.MurmurRPC.Authenticator.Response.Register.prototype.getUser = function() {
  return /** @type{?proto.MurmurRPC.DatabaseUser} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.DatabaseUser, 2));
};


/**
 * @param {?proto.MurmurRPC.DatabaseUser|undefined} value
 * @return {!proto.MurmurRPC.Authenticator.Response.Register} returns this
*/
proto.MurmurRPC.Authenticator.Response.Register.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.Authenticator.Response.Register} returns this
 */
proto.MurmurRPC.Authenticator.Response.Register.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Authenticator.Response.Register.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.Authenticator.Response.Deregister.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.Authenticator.Response.Deregister.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.Authenticator.Response.Deregister} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Authenticator.Response.Deregister.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.Authenticator.Response.Deregister}
 */
proto.MurmurRPC.Authenticator.Response.Deregister.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.Authenticator.Response.Deregister;
  return proto.MurmurRPC.Authenticator.Response.Deregister.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.Authenticator.Response.Deregister} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.Authenticator.Response.Deregister}
 */
proto.MurmurRPC.Authenticator.Response.Deregister.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.MurmurRPC.Authenticator.Response.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.Authenticator.Response.Deregister.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.Authenticator.Response.Deregister.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.Authenticator.Response.Deregister} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Authenticator.Response.Deregister.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.MurmurRPC.Authenticator.Response.Status} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional Status status = 1;
 * @return {!proto.MurmurRPC.Authenticator.Response.Status}
 */
proto.MurmurRPC.Authenticator.Response.Deregister.prototype.getStatus = function() {
  return /** @type {!proto.MurmurRPC.Authenticator.Response.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.MurmurRPC.Authenticator.Response.Status} value
 * @return {!proto.MurmurRPC.Authenticator.Response.Deregister} returns this
 */
proto.MurmurRPC.Authenticator.Response.Deregister.prototype.setStatus = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Authenticator.Response.Deregister} returns this
 */
proto.MurmurRPC.Authenticator.Response.Deregister.prototype.clearStatus = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Authenticator.Response.Deregister.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.Authenticator.Response.Update.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.Authenticator.Response.Update.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.Authenticator.Response.Update} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Authenticator.Response.Update.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.Authenticator.Response.Update}
 */
proto.MurmurRPC.Authenticator.Response.Update.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.Authenticator.Response.Update;
  return proto.MurmurRPC.Authenticator.Response.Update.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.Authenticator.Response.Update} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.Authenticator.Response.Update}
 */
proto.MurmurRPC.Authenticator.Response.Update.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.MurmurRPC.Authenticator.Response.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.Authenticator.Response.Update.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.Authenticator.Response.Update.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.Authenticator.Response.Update} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.Authenticator.Response.Update.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.MurmurRPC.Authenticator.Response.Status} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional Status status = 1;
 * @return {!proto.MurmurRPC.Authenticator.Response.Status}
 */
proto.MurmurRPC.Authenticator.Response.Update.prototype.getStatus = function() {
  return /** @type {!proto.MurmurRPC.Authenticator.Response.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.MurmurRPC.Authenticator.Response.Status} value
 * @return {!proto.MurmurRPC.Authenticator.Response.Update} returns this
 */
proto.MurmurRPC.Authenticator.Response.Update.prototype.setStatus = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.Authenticator.Response.Update} returns this
 */
proto.MurmurRPC.Authenticator.Response.Update.prototype.clearStatus = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Authenticator.Response.Update.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Initialize initialize = 1;
 * @return {?proto.MurmurRPC.Authenticator.Response.Initialize}
 */
proto.MurmurRPC.Authenticator.Response.prototype.getInitialize = function() {
  return /** @type{?proto.MurmurRPC.Authenticator.Response.Initialize} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Authenticator.Response.Initialize, 1));
};


/**
 * @param {?proto.MurmurRPC.Authenticator.Response.Initialize|undefined} value
 * @return {!proto.MurmurRPC.Authenticator.Response} returns this
*/
proto.MurmurRPC.Authenticator.Response.prototype.setInitialize = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.Authenticator.Response} returns this
 */
proto.MurmurRPC.Authenticator.Response.prototype.clearInitialize = function() {
  return this.setInitialize(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Authenticator.Response.prototype.hasInitialize = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Authenticate authenticate = 2;
 * @return {?proto.MurmurRPC.Authenticator.Response.Authenticate}
 */
proto.MurmurRPC.Authenticator.Response.prototype.getAuthenticate = function() {
  return /** @type{?proto.MurmurRPC.Authenticator.Response.Authenticate} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Authenticator.Response.Authenticate, 2));
};


/**
 * @param {?proto.MurmurRPC.Authenticator.Response.Authenticate|undefined} value
 * @return {!proto.MurmurRPC.Authenticator.Response} returns this
*/
proto.MurmurRPC.Authenticator.Response.prototype.setAuthenticate = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.Authenticator.Response} returns this
 */
proto.MurmurRPC.Authenticator.Response.prototype.clearAuthenticate = function() {
  return this.setAuthenticate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Authenticator.Response.prototype.hasAuthenticate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Find find = 3;
 * @return {?proto.MurmurRPC.Authenticator.Response.Find}
 */
proto.MurmurRPC.Authenticator.Response.prototype.getFind = function() {
  return /** @type{?proto.MurmurRPC.Authenticator.Response.Find} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Authenticator.Response.Find, 3));
};


/**
 * @param {?proto.MurmurRPC.Authenticator.Response.Find|undefined} value
 * @return {!proto.MurmurRPC.Authenticator.Response} returns this
*/
proto.MurmurRPC.Authenticator.Response.prototype.setFind = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.Authenticator.Response} returns this
 */
proto.MurmurRPC.Authenticator.Response.prototype.clearFind = function() {
  return this.setFind(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Authenticator.Response.prototype.hasFind = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Query query = 4;
 * @return {?proto.MurmurRPC.Authenticator.Response.Query}
 */
proto.MurmurRPC.Authenticator.Response.prototype.getQuery = function() {
  return /** @type{?proto.MurmurRPC.Authenticator.Response.Query} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Authenticator.Response.Query, 4));
};


/**
 * @param {?proto.MurmurRPC.Authenticator.Response.Query|undefined} value
 * @return {!proto.MurmurRPC.Authenticator.Response} returns this
*/
proto.MurmurRPC.Authenticator.Response.prototype.setQuery = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.Authenticator.Response} returns this
 */
proto.MurmurRPC.Authenticator.Response.prototype.clearQuery = function() {
  return this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Authenticator.Response.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Register register = 5;
 * @return {?proto.MurmurRPC.Authenticator.Response.Register}
 */
proto.MurmurRPC.Authenticator.Response.prototype.getRegister = function() {
  return /** @type{?proto.MurmurRPC.Authenticator.Response.Register} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Authenticator.Response.Register, 5));
};


/**
 * @param {?proto.MurmurRPC.Authenticator.Response.Register|undefined} value
 * @return {!proto.MurmurRPC.Authenticator.Response} returns this
*/
proto.MurmurRPC.Authenticator.Response.prototype.setRegister = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.Authenticator.Response} returns this
 */
proto.MurmurRPC.Authenticator.Response.prototype.clearRegister = function() {
  return this.setRegister(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Authenticator.Response.prototype.hasRegister = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Deregister deregister = 6;
 * @return {?proto.MurmurRPC.Authenticator.Response.Deregister}
 */
proto.MurmurRPC.Authenticator.Response.prototype.getDeregister = function() {
  return /** @type{?proto.MurmurRPC.Authenticator.Response.Deregister} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Authenticator.Response.Deregister, 6));
};


/**
 * @param {?proto.MurmurRPC.Authenticator.Response.Deregister|undefined} value
 * @return {!proto.MurmurRPC.Authenticator.Response} returns this
*/
proto.MurmurRPC.Authenticator.Response.prototype.setDeregister = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.Authenticator.Response} returns this
 */
proto.MurmurRPC.Authenticator.Response.prototype.clearDeregister = function() {
  return this.setDeregister(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Authenticator.Response.prototype.hasDeregister = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Update update = 7;
 * @return {?proto.MurmurRPC.Authenticator.Response.Update}
 */
proto.MurmurRPC.Authenticator.Response.prototype.getUpdate = function() {
  return /** @type{?proto.MurmurRPC.Authenticator.Response.Update} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Authenticator.Response.Update, 7));
};


/**
 * @param {?proto.MurmurRPC.Authenticator.Response.Update|undefined} value
 * @return {!proto.MurmurRPC.Authenticator.Response} returns this
*/
proto.MurmurRPC.Authenticator.Response.prototype.setUpdate = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.Authenticator.Response} returns this
 */
proto.MurmurRPC.Authenticator.Response.prototype.clearUpdate = function() {
  return this.setUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.Authenticator.Response.prototype.hasUpdate = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.DatabaseUser.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.DatabaseUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.DatabaseUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.DatabaseUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    server: (f = msg.getServer()) && proto.MurmurRPC.Server.toObject(includeInstance, f),
    id: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    name: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    email: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    comment: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    hash: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    password: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    lastActive: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    texture: msg.getTexture_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.DatabaseUser}
 */
proto.MurmurRPC.DatabaseUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.DatabaseUser;
  return proto.MurmurRPC.DatabaseUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.DatabaseUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.DatabaseUser}
 */
proto.MurmurRPC.DatabaseUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MurmurRPC.Server;
      reader.readMessage(value,proto.MurmurRPC.Server.deserializeBinaryFromReader);
      msg.setServer(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setComment(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastActive(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTexture(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.DatabaseUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.DatabaseUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.DatabaseUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.DatabaseUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MurmurRPC.Server.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBytes(
      9,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.DatabaseUser.Query.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.DatabaseUser.Query.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.DatabaseUser.Query} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.DatabaseUser.Query.toObject = function(includeInstance, msg) {
  var f, obj = {
    server: (f = msg.getServer()) && proto.MurmurRPC.Server.toObject(includeInstance, f),
    filter: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.DatabaseUser.Query}
 */
proto.MurmurRPC.DatabaseUser.Query.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.DatabaseUser.Query;
  return proto.MurmurRPC.DatabaseUser.Query.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.DatabaseUser.Query} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.DatabaseUser.Query}
 */
proto.MurmurRPC.DatabaseUser.Query.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MurmurRPC.Server;
      reader.readMessage(value,proto.MurmurRPC.Server.deserializeBinaryFromReader);
      msg.setServer(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.DatabaseUser.Query.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.DatabaseUser.Query.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.DatabaseUser.Query} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.DatabaseUser.Query.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MurmurRPC.Server.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Server server = 1;
 * @return {?proto.MurmurRPC.Server}
 */
proto.MurmurRPC.DatabaseUser.Query.prototype.getServer = function() {
  return /** @type{?proto.MurmurRPC.Server} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Server, 1));
};


/**
 * @param {?proto.MurmurRPC.Server|undefined} value
 * @return {!proto.MurmurRPC.DatabaseUser.Query} returns this
*/
proto.MurmurRPC.DatabaseUser.Query.prototype.setServer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.DatabaseUser.Query} returns this
 */
proto.MurmurRPC.DatabaseUser.Query.prototype.clearServer = function() {
  return this.setServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.DatabaseUser.Query.prototype.hasServer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string filter = 2;
 * @return {string}
 */
proto.MurmurRPC.DatabaseUser.Query.prototype.getFilter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.MurmurRPC.DatabaseUser.Query} returns this
 */
proto.MurmurRPC.DatabaseUser.Query.prototype.setFilter = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.DatabaseUser.Query} returns this
 */
proto.MurmurRPC.DatabaseUser.Query.prototype.clearFilter = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.DatabaseUser.Query.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MurmurRPC.DatabaseUser.List.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.DatabaseUser.List.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.DatabaseUser.List.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.DatabaseUser.List} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.DatabaseUser.List.toObject = function(includeInstance, msg) {
  var f, obj = {
    server: (f = msg.getServer()) && proto.MurmurRPC.Server.toObject(includeInstance, f),
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    proto.MurmurRPC.DatabaseUser.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.DatabaseUser.List}
 */
proto.MurmurRPC.DatabaseUser.List.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.DatabaseUser.List;
  return proto.MurmurRPC.DatabaseUser.List.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.DatabaseUser.List} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.DatabaseUser.List}
 */
proto.MurmurRPC.DatabaseUser.List.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MurmurRPC.Server;
      reader.readMessage(value,proto.MurmurRPC.Server.deserializeBinaryFromReader);
      msg.setServer(value);
      break;
    case 2:
      var value = new proto.MurmurRPC.DatabaseUser;
      reader.readMessage(value,proto.MurmurRPC.DatabaseUser.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.DatabaseUser.List.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.DatabaseUser.List.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.DatabaseUser.List} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.DatabaseUser.List.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MurmurRPC.Server.serializeBinaryToWriter
    );
  }
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.MurmurRPC.DatabaseUser.serializeBinaryToWriter
    );
  }
};


/**
 * optional Server server = 1;
 * @return {?proto.MurmurRPC.Server}
 */
proto.MurmurRPC.DatabaseUser.List.prototype.getServer = function() {
  return /** @type{?proto.MurmurRPC.Server} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Server, 1));
};


/**
 * @param {?proto.MurmurRPC.Server|undefined} value
 * @return {!proto.MurmurRPC.DatabaseUser.List} returns this
*/
proto.MurmurRPC.DatabaseUser.List.prototype.setServer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.DatabaseUser.List} returns this
 */
proto.MurmurRPC.DatabaseUser.List.prototype.clearServer = function() {
  return this.setServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.DatabaseUser.List.prototype.hasServer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated DatabaseUser users = 2;
 * @return {!Array<!proto.MurmurRPC.DatabaseUser>}
 */
proto.MurmurRPC.DatabaseUser.List.prototype.getUsersList = function() {
  return /** @type{!Array<!proto.MurmurRPC.DatabaseUser>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MurmurRPC.DatabaseUser, 2));
};


/**
 * @param {!Array<!proto.MurmurRPC.DatabaseUser>} value
 * @return {!proto.MurmurRPC.DatabaseUser.List} returns this
*/
proto.MurmurRPC.DatabaseUser.List.prototype.setUsersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.MurmurRPC.DatabaseUser=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MurmurRPC.DatabaseUser}
 */
proto.MurmurRPC.DatabaseUser.List.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.MurmurRPC.DatabaseUser, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MurmurRPC.DatabaseUser.List} returns this
 */
proto.MurmurRPC.DatabaseUser.List.prototype.clearUsersList = function() {
  return this.setUsersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.DatabaseUser.Verify.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.DatabaseUser.Verify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.DatabaseUser.Verify} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.DatabaseUser.Verify.toObject = function(includeInstance, msg) {
  var f, obj = {
    server: (f = msg.getServer()) && proto.MurmurRPC.Server.toObject(includeInstance, f),
    name: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    password: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.DatabaseUser.Verify}
 */
proto.MurmurRPC.DatabaseUser.Verify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.DatabaseUser.Verify;
  return proto.MurmurRPC.DatabaseUser.Verify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.DatabaseUser.Verify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.DatabaseUser.Verify}
 */
proto.MurmurRPC.DatabaseUser.Verify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MurmurRPC.Server;
      reader.readMessage(value,proto.MurmurRPC.Server.deserializeBinaryFromReader);
      msg.setServer(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.DatabaseUser.Verify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.DatabaseUser.Verify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.DatabaseUser.Verify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.DatabaseUser.Verify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MurmurRPC.Server.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional Server server = 1;
 * @return {?proto.MurmurRPC.Server}
 */
proto.MurmurRPC.DatabaseUser.Verify.prototype.getServer = function() {
  return /** @type{?proto.MurmurRPC.Server} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Server, 1));
};


/**
 * @param {?proto.MurmurRPC.Server|undefined} value
 * @return {!proto.MurmurRPC.DatabaseUser.Verify} returns this
*/
proto.MurmurRPC.DatabaseUser.Verify.prototype.setServer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.DatabaseUser.Verify} returns this
 */
proto.MurmurRPC.DatabaseUser.Verify.prototype.clearServer = function() {
  return this.setServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.DatabaseUser.Verify.prototype.hasServer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.MurmurRPC.DatabaseUser.Verify.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.MurmurRPC.DatabaseUser.Verify} returns this
 */
proto.MurmurRPC.DatabaseUser.Verify.prototype.setName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.DatabaseUser.Verify} returns this
 */
proto.MurmurRPC.DatabaseUser.Verify.prototype.clearName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.DatabaseUser.Verify.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string password = 3;
 * @return {string}
 */
proto.MurmurRPC.DatabaseUser.Verify.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.MurmurRPC.DatabaseUser.Verify} returns this
 */
proto.MurmurRPC.DatabaseUser.Verify.prototype.setPassword = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.DatabaseUser.Verify} returns this
 */
proto.MurmurRPC.DatabaseUser.Verify.prototype.clearPassword = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.DatabaseUser.Verify.prototype.hasPassword = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Server server = 1;
 * @return {?proto.MurmurRPC.Server}
 */
proto.MurmurRPC.DatabaseUser.prototype.getServer = function() {
  return /** @type{?proto.MurmurRPC.Server} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Server, 1));
};


/**
 * @param {?proto.MurmurRPC.Server|undefined} value
 * @return {!proto.MurmurRPC.DatabaseUser} returns this
*/
proto.MurmurRPC.DatabaseUser.prototype.setServer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.DatabaseUser} returns this
 */
proto.MurmurRPC.DatabaseUser.prototype.clearServer = function() {
  return this.setServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.DatabaseUser.prototype.hasServer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 id = 2;
 * @return {number}
 */
proto.MurmurRPC.DatabaseUser.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.MurmurRPC.DatabaseUser} returns this
 */
proto.MurmurRPC.DatabaseUser.prototype.setId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.DatabaseUser} returns this
 */
proto.MurmurRPC.DatabaseUser.prototype.clearId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.DatabaseUser.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.MurmurRPC.DatabaseUser.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.MurmurRPC.DatabaseUser} returns this
 */
proto.MurmurRPC.DatabaseUser.prototype.setName = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.DatabaseUser} returns this
 */
proto.MurmurRPC.DatabaseUser.prototype.clearName = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.DatabaseUser.prototype.hasName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string email = 4;
 * @return {string}
 */
proto.MurmurRPC.DatabaseUser.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.MurmurRPC.DatabaseUser} returns this
 */
proto.MurmurRPC.DatabaseUser.prototype.setEmail = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.DatabaseUser} returns this
 */
proto.MurmurRPC.DatabaseUser.prototype.clearEmail = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.DatabaseUser.prototype.hasEmail = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string comment = 5;
 * @return {string}
 */
proto.MurmurRPC.DatabaseUser.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.MurmurRPC.DatabaseUser} returns this
 */
proto.MurmurRPC.DatabaseUser.prototype.setComment = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.DatabaseUser} returns this
 */
proto.MurmurRPC.DatabaseUser.prototype.clearComment = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.DatabaseUser.prototype.hasComment = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string hash = 6;
 * @return {string}
 */
proto.MurmurRPC.DatabaseUser.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.MurmurRPC.DatabaseUser} returns this
 */
proto.MurmurRPC.DatabaseUser.prototype.setHash = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.DatabaseUser} returns this
 */
proto.MurmurRPC.DatabaseUser.prototype.clearHash = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.DatabaseUser.prototype.hasHash = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string password = 7;
 * @return {string}
 */
proto.MurmurRPC.DatabaseUser.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.MurmurRPC.DatabaseUser} returns this
 */
proto.MurmurRPC.DatabaseUser.prototype.setPassword = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.DatabaseUser} returns this
 */
proto.MurmurRPC.DatabaseUser.prototype.clearPassword = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.DatabaseUser.prototype.hasPassword = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string last_active = 8;
 * @return {string}
 */
proto.MurmurRPC.DatabaseUser.prototype.getLastActive = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.MurmurRPC.DatabaseUser} returns this
 */
proto.MurmurRPC.DatabaseUser.prototype.setLastActive = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.DatabaseUser} returns this
 */
proto.MurmurRPC.DatabaseUser.prototype.clearLastActive = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.DatabaseUser.prototype.hasLastActive = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bytes texture = 9;
 * @return {!(string|Uint8Array)}
 */
proto.MurmurRPC.DatabaseUser.prototype.getTexture = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes texture = 9;
 * This is a type-conversion wrapper around `getTexture()`
 * @return {string}
 */
proto.MurmurRPC.DatabaseUser.prototype.getTexture_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTexture()));
};


/**
 * optional bytes texture = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTexture()`
 * @return {!Uint8Array}
 */
proto.MurmurRPC.DatabaseUser.prototype.getTexture_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTexture()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.MurmurRPC.DatabaseUser} returns this
 */
proto.MurmurRPC.DatabaseUser.prototype.setTexture = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MurmurRPC.DatabaseUser} returns this
 */
proto.MurmurRPC.DatabaseUser.prototype.clearTexture = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.DatabaseUser.prototype.hasTexture = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MurmurRPC.RedirectWhisperGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.MurmurRPC.RedirectWhisperGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MurmurRPC.RedirectWhisperGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.RedirectWhisperGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    server: (f = msg.getServer()) && proto.MurmurRPC.Server.toObject(includeInstance, f),
    user: (f = msg.getUser()) && proto.MurmurRPC.User.toObject(includeInstance, f),
    source: (f = msg.getSource()) && proto.MurmurRPC.ACL.Group.toObject(includeInstance, f),
    target: (f = msg.getTarget()) && proto.MurmurRPC.ACL.Group.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MurmurRPC.RedirectWhisperGroup}
 */
proto.MurmurRPC.RedirectWhisperGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MurmurRPC.RedirectWhisperGroup;
  return proto.MurmurRPC.RedirectWhisperGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MurmurRPC.RedirectWhisperGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MurmurRPC.RedirectWhisperGroup}
 */
proto.MurmurRPC.RedirectWhisperGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MurmurRPC.Server;
      reader.readMessage(value,proto.MurmurRPC.Server.deserializeBinaryFromReader);
      msg.setServer(value);
      break;
    case 2:
      var value = new proto.MurmurRPC.User;
      reader.readMessage(value,proto.MurmurRPC.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 3:
      var value = new proto.MurmurRPC.ACL.Group;
      reader.readMessage(value,proto.MurmurRPC.ACL.Group.deserializeBinaryFromReader);
      msg.setSource(value);
      break;
    case 4:
      var value = new proto.MurmurRPC.ACL.Group;
      reader.readMessage(value,proto.MurmurRPC.ACL.Group.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MurmurRPC.RedirectWhisperGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MurmurRPC.RedirectWhisperGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MurmurRPC.RedirectWhisperGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MurmurRPC.RedirectWhisperGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MurmurRPC.Server.serializeBinaryToWriter
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.MurmurRPC.User.serializeBinaryToWriter
    );
  }
  f = message.getSource();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.MurmurRPC.ACL.Group.serializeBinaryToWriter
    );
  }
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.MurmurRPC.ACL.Group.serializeBinaryToWriter
    );
  }
};


/**
 * optional Server server = 1;
 * @return {?proto.MurmurRPC.Server}
 */
proto.MurmurRPC.RedirectWhisperGroup.prototype.getServer = function() {
  return /** @type{?proto.MurmurRPC.Server} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.Server, 1));
};


/**
 * @param {?proto.MurmurRPC.Server|undefined} value
 * @return {!proto.MurmurRPC.RedirectWhisperGroup} returns this
*/
proto.MurmurRPC.RedirectWhisperGroup.prototype.setServer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.RedirectWhisperGroup} returns this
 */
proto.MurmurRPC.RedirectWhisperGroup.prototype.clearServer = function() {
  return this.setServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.RedirectWhisperGroup.prototype.hasServer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional User user = 2;
 * @return {?proto.MurmurRPC.User}
 */
proto.MurmurRPC.RedirectWhisperGroup.prototype.getUser = function() {
  return /** @type{?proto.MurmurRPC.User} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.User, 2));
};


/**
 * @param {?proto.MurmurRPC.User|undefined} value
 * @return {!proto.MurmurRPC.RedirectWhisperGroup} returns this
*/
proto.MurmurRPC.RedirectWhisperGroup.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.RedirectWhisperGroup} returns this
 */
proto.MurmurRPC.RedirectWhisperGroup.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.RedirectWhisperGroup.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ACL.Group source = 3;
 * @return {?proto.MurmurRPC.ACL.Group}
 */
proto.MurmurRPC.RedirectWhisperGroup.prototype.getSource = function() {
  return /** @type{?proto.MurmurRPC.ACL.Group} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.ACL.Group, 3));
};


/**
 * @param {?proto.MurmurRPC.ACL.Group|undefined} value
 * @return {!proto.MurmurRPC.RedirectWhisperGroup} returns this
*/
proto.MurmurRPC.RedirectWhisperGroup.prototype.setSource = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.RedirectWhisperGroup} returns this
 */
proto.MurmurRPC.RedirectWhisperGroup.prototype.clearSource = function() {
  return this.setSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.RedirectWhisperGroup.prototype.hasSource = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ACL.Group target = 4;
 * @return {?proto.MurmurRPC.ACL.Group}
 */
proto.MurmurRPC.RedirectWhisperGroup.prototype.getTarget = function() {
  return /** @type{?proto.MurmurRPC.ACL.Group} */ (
    jspb.Message.getWrapperField(this, proto.MurmurRPC.ACL.Group, 4));
};


/**
 * @param {?proto.MurmurRPC.ACL.Group|undefined} value
 * @return {!proto.MurmurRPC.RedirectWhisperGroup} returns this
*/
proto.MurmurRPC.RedirectWhisperGroup.prototype.setTarget = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MurmurRPC.RedirectWhisperGroup} returns this
 */
proto.MurmurRPC.RedirectWhisperGroup.prototype.clearTarget = function() {
  return this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MurmurRPC.RedirectWhisperGroup.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.MurmurRPC);
